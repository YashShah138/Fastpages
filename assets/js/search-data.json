{
  
    
        "post0": {
            "title": "Night @ The Museum",
            "content": "Night At The Museum . Reflection . Our presentation for night at the museum was well done and polished, we were able to present with all of our frontend and backend working as we intended. Some people who came up to us were very interested in the project, thought the idea was very useful and applicable, and were interested in using it in the future. I might continue developing this outside of school, as I am quite passionate about our website. We also were able to get some very useful feedback, regarding our UI/frontend. Overall, we were very happy with how our presentation went and we were able to get a lot of positive feedback from all of the people who came up to us. . Capture The Moment . .",
            "url": "https://yashshah138.github.io/Fastpages/week-24/2023/02/27/NATM.html",
            "relUrl": "/week-24/2023/02/27/NATM.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "AP CSA Quiz Reflection and Corrections",
            "content": "Score: 47/52 . Reflection . I think this time, I was much stronger on the theoretical aspects of the quiz, but made stupid mistakes because I was rushing. I was able to somewhat remember DeMorgan’s Law, but had to look it up to make sure I was correct. I made mistakes when I was skimming the code and not playing out the recursion or other theoretical questions. . Questions . Question 19 . I thought that it would return the index of the first occurrence of check inside str, but it was actually the index of the last occurrence of check inside str. This is due to the fact that you have num = k in the for loop, so the last occurence of check inside str would be the one that is returned. . Question 20 . I thought that ! would be printed only twice, but that is not the case as it would actually be printed 6 times. I thought that the operator in the statement was &lt; instead of &gt;, so I thought that it would only print the ! twice. . Question 25 . Here, my answer would have been correct if the remove happened before size was calculated in the add statement, but it was not the case here and so it would have caused bear to be at the beginning and baboon at the end. . Question 42 . In this case, I forgot that using the remove method would cause the index of the elements to be shifted, throwing an ArrayIndexOutOfBoundsException at the end. . Question 45 . I thought that the method is executed once for every loop in the nest for loops, which would be 15 times, but I forgot that the if statement would cause it to only be run the 4 times when the condition is true. .",
            "url": "https://yashshah138.github.io/Fastpages/week-20/2023/02/01/Test-Corrections-52Q.html",
            "relUrl": "/week-20/2023/02/01/Test-Corrections-52Q.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "AP CSA Quiz Reflection and Corrections",
            "content": "Score: 63/66 . Reflection . I think this time, I was much stronger on the theoretical aspects of the quiz, but made stupid mistakes because I was rushing. I was able to somewhat remember DeMorgan’s Law, but had to look it up to make sure I was correct. I made mistakes when I was skimming the code and not playing out the recursion or other theoretical questions. . Questions . Question 37 . The statement assigns a different value to b2 than the code segment assigns to b1 when num is between 0 and 100, exclusive. 3.3: Daily Video 1 (Skill 4.A) 3.3: Daily Video 2 (Skill 3.C) 3.5: Daily Video 1 (Skill 2.B) 3.5: Daily Video 2 (Skill 2.B) 3.5: Daily Video 3 (Skill 2.B) . Question 38 . Just made stupid mistake in reading the code. 3.5: Daily Video 1 (Skill 2.B) 3.5: Daily Video 2 (Skill 2.B) 3.5: Daily Video 3 (Skill 2.B) . Question 52 . Although the revised code will compile, it will not perform as intended because the statement on line 14 does not change the value of price. 5.5: Daily Video 1 (Skill 3.B) 5.5: Daily Video 2 (Skill 4.B) .",
            "url": "https://yashshah138.github.io/Fastpages/week-19/2023/01/23/Test-Reflection.html",
            "relUrl": "/week-19/2023/01/23/Test-Reflection.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Notes",
            "content": "Explanations . Notes on if Destroyer[2] == &quot;h&quot;: . Destroyer = [] . input(row, col, orientation) ==&gt; Destroyer print Destroyer =&gt; [row, col, orientation] . Destroyer[0, 1, 2] . Destroyer[2] = orientation . Notes on for i in range(DestroyerSize): .",
            "url": "https://yashshah138.github.io/Fastpages/week-16/2022/12/16/Yug-Python.html",
            "relUrl": "/week-16/2022/12/16/Yug-Python.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "College Board Vocab Units 06-10",
            "content": "Inheritance, Extends . class Animal { // field and method of the parent class String name; public void eat() { System.out.println(&quot;I can eat&quot;); } } // inherit from Animal class Dog extends Animal { // new method in subclass public void display() { System.out.println(&quot;My name is &quot; + name); } } class Main { public static void main(String[] args) { // create an object of the subclass Dog gs = new Dog(); // access field of superclass gs.name = &quot;Max&quot;; gs.display(); // call method of superclass // using object of subclass gs.eat(); } } Main.main(null); . My name is Max I can eat . Subclass constructor, super Keyword . Uses of super keyword To call methods of the superclass that is overridden in the subclass. | To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name. | To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor. | . | . /** * super to Call Superclass Method */ class Animal { // overridden method public void display(){ System.out.println(&quot;I am an animal&quot;); } } class Dog extends Animal { // overriding method @Override public void display(){ System.out.println(&quot;I am a dog&quot;); } public void printMessage(){ // this calls overriding method display(); // this calls overridden method super.display(); } } class Main { public static void main(String[] args) { Dog dog1 = new Dog(); dog1.printMessage(); } } Main.main(null); . I am a dog I am an animal . /** * Access superclass attribute */ class Animal { protected String type=&quot;animal&quot;; } class Dog extends Animal { public String type=&quot;mammal&quot;; public void printType() { System.out.println(&quot;I am a &quot; + type); System.out.println(&quot;I am an &quot; + super.type); } } class Main { public static void main(String[] args) { Dog dog1 = new Dog(); dog1.printType(); } } Main.main(null); . I am a mammal I am an animal . Overloading a method, same name different parameters . class MethodOverloading { // this method accepts int object private static void display(int a){ System.out.println(&quot;Got Integer data.&quot;); } // this method accepts String object private static void display(String a){ System.out.println(&quot;Got String object.&quot;); } public static void main(String[] args) { display(1); display(&quot;Hello&quot;); } } MethodOverloading.main(null); . Got Integer data. Got String object. . Overriding a method, same signature of a method . /** * Method Overriding */ class Animal { // overridden method public void display(){ System.out.println(&quot;I am an animal&quot;); } } class Dog extends Animal { // overriding method @Override public void display(){ System.out.println(&quot;I am a dog&quot;); } public void printMessage(){ display(); } } class Main { public static void main(String[] args) { Dog dog1 = new Dog(); dog1.printMessage(); } } Main.main(null); . I am a dog . Abstract Class, Abstract Method . Data abstraction is the process of hiding certain details and showing only essential information to the user | Abstraction can be achieved with either abstract classes or interfaces | . // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(&quot;Zzz&quot;); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(&quot;The pig says: wee wee&quot;); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Main.main(null); . The pig says: wee wee Zzz . Standard methods: toString(), equals(), hashCode() . Mainly used with objects, arrays, and arraylists | . /** * hashCode() */ ArrayList&lt;String&gt; arrli = new ArrayList&lt;String&gt;(); arrli.add(&quot;Hello&quot;); arrli.add(&quot;Howdy&quot;); arrli.add(&quot;Hey&quot;); arrli.add(&quot;Hi&quot;); System.out.println(arrli); System.out.println(arrli.hashCode()); . [Hello, Howdy, Hey, Hi] 2041636537 . /** * toString() */ class Friend { // Member attributes of this class String name; int age; int grade; // Constructor of this class Friend(String name, int age, int grade) { // This variable refers to current instance itself this.name = name; this.age = age; this.grade = grade; } public String toString() { return name + &quot;, &quot; + age + &quot;, &quot; + grade; } // Method of this class // Main driver method public static void main(String[] args) { // Creating an object of this class // Custom attributes been passed as in arguments Friend b = new Friend(&quot;Yash Shah&quot;, 17, 12); // Print and display commands to illustrate // toString() method as both will print the same // Print the object System.out.println(b.hashCode()); // Print the object but implicitly using toString() // method System.out.println(b.toString()); } } Best_Friend.main(null); . 905115276 Yash Shah, 17, 12 . /** * equals() */ public class EqualsExample{ public static void main(String args[]){ String compare1 = &quot;java&quot;; String compare2 = &quot;java&quot;; String compare3 = &quot;JAVA&quot;; String compare4 = &quot;python&quot;; //true because content and case is same System.out.println(compare1.equals(compare2)); //false because case is not same System.out.println(compare1.equals(compare3)); //false because content is not same System.out.println(compare1.equals(compare4)); } } EqualsExample.main(null); . true false false . Late binding of object, referencing superclass object . Animal a = new Chicken(); Animal b = new Goat(); . Polymorphism: any of overloading, overriding, late binding . Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters. Overloading is when you have multiple methods with the same name but different parameters. | Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. | Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. Abstract Class - Objects cannot be created from an abstract class, they can only be extended. This is useful when you want to create a class that can be extended but not instantiated. | . | . public class PolymorphismExample { public void testOutput(int x) { System.out.println(&quot;Integer: &quot; + x); } public void testOutput(String x) { System.out.println(&quot;String: &quot; + x); } public void testOutput(double x) { System.out.println(&quot;Double: &quot; + x); } } PolymorphismExample pe = new PolymorphismExample(); System.out.println(&quot;Polymorphism Example:&quot;); pe.testOutput(5); pe.testOutput(&quot;Hello&quot;); pe.testOutput(5.5); . Polymorphism Example: Integer: 5 String: Hello Double: 5.5 . Complexity Equation . O(N!) | Factorial | . O(2^N) | Exponential | . O(N^3) | Cubic | . O(N^2) | Quadratic | . O(N Log N) | N * Log N | . O(N) | Linear | . O(Log N) | Logarithmic | . O(1) | Constant | . /** * Binary Search - O(Log N) */ public class BinarySearch { // Searching using Recursive approach public static int Search(int arr[], int value, int start, int end) { int center = (start + end) / 2; if (start &lt;= end) { if (value == center) { return center; } if (value &lt; center) { return Search(arr, value, start, center - 1); } if (value &gt; center) { return Search(arr, value, center + 1, end); } } return -1; } public static void main(String[] args) { int arr[] = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; int Index = Search(arr, 9, 0, arr.length); if (Index == -1) { System.out.println(&quot;Value Not Found&quot;); } else { System.out.println(&quot;Value found at Index: &quot; + Index); } } } BinarySearch.main(null); . Value found at Index: 9 .",
            "url": "https://yashshah138.github.io/Fastpages/week-16/2022/12/14/Vocab-pt2.html",
            "relUrl": "/week-16/2022/12/14/Vocab-pt2.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 10 Tues - Recursion",
            "content": "Intro to Recursion . A recursive method is method that calls itself. | It contains at least one base case that halts recursion and once recursive call | Each recursive call has own local variables | Parameter values take progress of recursive process | A recursion can be replaced with an iterative and give the same result | Recursion can traverse String, array, and ArrayList objects | Can also be used with strings | . // Recursion method within itself public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . Binary Search w/ Equations . Read the search element from the user. | Find the middle element in the sorted list. | Compare the search element with the middle element in the sorted list. | If both are matched, then display &quot;Given element is found!!!&quot; and terminate the function. | If both are not matched, then check whether the search element is smaller or larger than the middle element. | If the search element is smaller than middle element, repeat steps 2, 3, 4 and 5 for the left sublist of the middle element. | If the search element is larger than middle element, repeat steps 2, 3, 4 and 5 for the right sublist of the middle element. | Repeat the same process until we find the search element in the list or until sublist contains only one element. | If that element also doesn&#39;t match with the search element, then display &quot;Element is not found in the list!!!&quot; and terminate the function. | . /** * Recursion in binary search */ public class recursion{ public static int recursionBinarySearch(int[] array, int first, int last, int target){ int midpoint; //if the first number is greater than the last, the target number is not in the list if (first &gt; last){ System.out.println(-1); return -1; } else { midpoint = (first+last)/2; //take the upper bound if number is greater than midpoint if (array[midpoint] &lt; target){ return recursionBinarySearch(array, midpoint+1, last, target); } // take the lower bound if the number is lesser than midpoint if (array[midpoint] &gt; target){ return recursionBinarySearch(array, first,midpoint-1, target); } System.out.println(&quot;index of target: &quot; + midpoint); return midpoint; } } public static void main(String[] args){ // test array in main int[] test_array = new int[]{ 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 }; recursion.recursionBinarySearch(test_array, 0, test_array.length, 24); } } recursion.main(null); . index of target: 12 . Merge Sort . Merge Sort can be used to sort ArrayLists | Uses a Divide and Conquer algorithm to Sort ArrayList Divides the array into halves, and then calls itself for the two different halves in order to sort them | Merges the two sorted halves into one lists | . | Merging Values into One Sorted Array copy the original elements into a temporary array | work from left to right in each virtual array to compare element and return them to the correct order in the original array | . | . mergeSort (myArray, low, high) { if (low &lt; high) { middle = (low + high) / 2; mergeSort(myArray, low, high); mergeSort(myArray, middle + 1, high); merge(myArray, low, middle, high); } } . Recursion Trees . Recursion trees are a method for visualizing each recursive case (everytime the method is called) until the base case is reached. | Recursive blocks call themselves. In order for them to finish, there must be some special case in which they don&#39;t call themselves. That is the base case, a simpler version of the block&#39;s script that doesn&#39;t call the block itself. | There is usually a conditional with two cases: a base case for the lowest level that stops the recursion from going on forever and a recursive case that calls the block itself at lower levels until it reaches the base case. | Note: If a block keeps recursively calling itself forever, the program is stuck in an infinite loop meaning that there isn&#39;t a base case or it is not accessible. | . . public class example{ static int foo(int n) { if (n &lt; 0){ return 1; } else{ return foo(n-2) + foo(n-1); } } public static void main(String args[]){ System.out.println(foo(3)); } } example.main(null); . 8 . /** * Fibonacci Series Using Recursion */ class fibonacci { static int fib(int n) { // Handling base case // iIf value of n=1 or n=0, it returns 1 if (n &lt;= 1) return n; // Generic case // Otherwise we do n-1 + n-2! return fib(n - 1) + fib(n - 2); } public static void main(String args[]) { // Calling method 1 to compute fibonacci and // storing the result into a variable int n = 3; // Print and display the fibonacci of number // customly passed as an argument System.out.println(&quot;3rd Fibonacci Sequence is: &quot; + fib(n)); } } fibonacci.main(null); . 3rd Fibonacci Sequence is: 2 . class factorial { static int fact(int n) { // Handling base case // iIf value of n=1 or n=0, it returns 1 if (n == 0 || n == 1) return 1; // Generic case // Otherwise we do n*(n-1)! return n * fact(n - 1); } // Method 2 // main driver method public static void main(String[] args) { // Calling method 1 to compute factorial and // storing the result into a variable int n = 4; // Print and display the factorial of number // customly passed as an argument System.out.println(&quot;Factorial of 4 is: &quot; + fact(n)); } } factorial.main(null); .",
            "url": "https://yashshah138.github.io/Fastpages/week-16/2022/12/13/Unit-10.html",
            "relUrl": "/week-16/2022/12/13/Unit-10.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "FRQ 4 - LightBoard",
            "content": "import java.lang.Math; public class LightBoard { /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols){ /* to be implemented in part (a) */ // initialize the 2D array lights = new boolean[numRows][numCols]; // Using two enhanced for loops to iterate through the 2D array for (int i = 0; i &lt; lights.length; i++) { for (int j = 0; j &lt; lights[i].length; j++){ // use math.random to generate a random number, less than 0.4, to determine if the light is on or off if (Math.random() &lt; 0.4){ lights[i][j] = true; } else{ lights[i][j] = false; } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { /* to be implemented in part (b) */ // CHECK IF LIGHT IS ON if (lights[row][col] == true) { // return false if the number of lights in its column are even int counter = 0; // iterate through every row and check for value of the column, if true increment counter for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } // check if counter is even or odd if (counter % 2 == 0){ return false; } else{ return true; } } // If light is off else { int counter = 0; // Count number of lights in the column for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } // return true if the number of lights in the column is divisible by 3 if (counter % 3 == 0) { return true; } else { return false; } } } // There may be additional instance variables, constructors, and methods not shown. } LightBoard a = new LightBoard(5,5); System.out.println(a.evaluateLight(0,0)); System.out.println(a.evaluateLight(0,1)); System.out.println(a.evaluateLight(0,2)); . false false false .",
            "url": "https://yashshah138.github.io/Fastpages/week-16/2022/12/13/FRQ4.html",
            "relUrl": "/week-16/2022/12/13/FRQ4.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Notes and Reflection from Compsci/Technical Business Panel",
            "content": "Notes . Kathyleen Beveridge - Senior Director of Commercial Excellence . BA from Santa Clara U in Finance | MBA from USC | Wells Fargo (Investment banker) =&gt; HP (Cost accountant) =&gt; Qualcomm (Sr. Demand Planning Analyst) =&gt; ThermoFisher (Senior Director of Commercial Excellence) | “My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style” - Maya Angelou | Mission Statements HP Create technology that makes life better for everyone, everywhere | . | Qualcomm Inventing the tech the world loves | . | Thermo Fisher Scientific Enable our customers to make the world healthier, cleaner, and safer | . | . | Similarities Using tech to better the world | Innovation | . | . Kris Porter - Software Engineer, SRE, DevOps, Infrastructure Engineer . Bachelors from UCLA in Electrical engineering | Master’s from Cal State Los Angeles Communications systems and computer engineering | . | Conducted research at the Center for Embedded Networked Sensors Networked Infomechanical systems (NIMS) | Intro to Linux OS, software development cycle | . | Timeline Graduated - 2008 | Systems engineer at start up (GPM) - 2010 | Streaming Media Infrastructure (NBC Universal) - 2012 | Intro to DevOps (Qualcomm) - 2014 | Software engineer (Twitter) - 2021 Worked on GraphQL | . | . | Continued learning throughout his life CCNA training | Machine learning and deep learning (Qualcomm) | Python (Udemy) | Data structures, algorithms, and systems design for interviews | Twitter onboarding | . | . Reflection . From the computer science and technical business panel, I learned a few things. The first thing that I learned is that when pursuing a job in the technology field, it is not needed to have a degree in software engineering, computer science, or other computer related degrees. We can see this from Mrs. Beveridge. She pursued a degree in finance and an MBA, but was able to pursue a job in the technology sector. I also learned that there are many paths to having a job in the big tech companies. From Mr. Porter, we saw that he went from being unemployed to working at a startup, then a job where tech isn’t the product/service being sold, to working for a big tech firm. Mrs. Beveridge and Mr. Porter have encouraged me to pursue a degree in computer science ans combine it with a degree in finance, as there are many opportunities in both worlds. I love working with numbers and that is what draws me to finance; I also love programming which is what drew me to computer science. As I was applying to colleges, I was worried that I would only be able to pursue one of my passions, but listening to this panel and hearing their paths to tech jobs, I am more confident that I will be able to find a job in a tech sector regardless of my background and I will be able to use both of my passions in my job. .",
            "url": "https://yashshah138.github.io/Fastpages/extras/2022/12/13/Compsci-Business-Panel.html",
            "relUrl": "/extras/2022/12/13/Compsci-Business-Panel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 09 Mon - Inheritance",
            "content": "Notes . constructor is a special method that is used to create and initialize an object | When creating a subclass, you typically want to reuse the constructor from the parent class (also known as the &quot;superclass&quot;) and add some additional functionality | . public class Animal { // Constructor for the Animal class public Animal() { // Initialize the object } } public class Dog extends Animal { // Constructor for the Dog class public Dog() { // Call the constructor of the superclass super(); // Initialize the object } } . Possible to call a specific constructor of the superclass by specifying the parameters | . /** * In this example using inheritance allows us to inherit the salary of the programmer by extending the superclass of employee */ class Person { private String name; public Person(String theName) { this.name = theName; } public String getName() { return name; } public boolean setName(String theNewName) { if (theNewName != null) { this.name = theNewName; return true; } return false; } } public class Employee extends Person { private int id; public static int nextId = 1; public Employee(String theName) { super(theName); id = nextId; nextId++; } public int getId() { return id; } public static void main(String[] args) { Employee emp = new Employee(&quot;Yash&quot;); System.out.println(emp.getName()); System.out.println(emp.getId()); } } Employee.main(null); . Yash 1 . /** * Example of polymorphism in Java */ public class Sport { // action() method instantiated public void action() { System.out.println(&quot;Physical activity&quot;); } } // Subclass Soccer class Soccer extends Sport { // Soccer implementation of the action() method public void action() { System.out.println(&quot;Kick the ball&quot;); } } // Subclass Basketball class Basketball extends Sport { // Basketball implementation of the action() method public void action() { System.out.println(&quot;Shoot the ball&quot;); } } // Subclass Baseball class Baseball extends Sport { // Baseball implementation of the action() method public void action() { System.out.println(&quot;Hit a home run&quot;); } } // Main class for running the code class Main { public static void main(String[] args) { // Creating objects with the same reference type but different object types. The classes above follow a class hierarchy. Sport sport = new Sport(); Sport sport1 = new Soccer(); Sport sport2 = new Basketball(); Sport sport3 = new Baseball(); sport.action(); sport1.action(); sport2.action(); sport3.action(); } } Main.main(null); . Physical activity Kick the ball Shoot the ball Hit a home run . /** * Overriding methods */ class Vehicle { void run(){System.out.println(&quot;Vehicle is running&quot;);} } //Creating a child class class Bike extends Vehicle { public static void main(String args[]) { //creating an instance of child class Bike obj = new Bike(); //calling the method with child class instance obj.run(); } } Bike.main(null); . Vehicle is running . Homework . Part 1 . Create a world cup superclass with properties of your choice and subclasses for five teams which inherits those properties | Write a constructor for one of those subclasses | . public class Team { public int score; public int wins; public int all_goals; public Team(int score, int wins, int all_goals) { this.score = score; this.wins = wins; this.all_goals = all_goals; } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Unknown&quot;); } public void out() { System.out.println(&quot;Team score: &quot; + this.score); System.out.println(&quot;Team wins: &quot; + this.wins); System.out.println(&quot;Team all goals: &quot; + this.all_goals); bestplayer(); } } public class France extends Team { public France(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Kylian Mbappé&quot;); } } public class Argentina extends Team { public Argentina(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Lionel Messi&quot;); } } public class Croatia extends Team { public Croatia(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Luka Modrić&quot;); } } public class Morocco extends Team { public Morocco(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Hakim Ziyech&quot;); } } public class Portugal extends Team { public Portugal(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Cristiano Ronaldo&quot;); } } Team arg = new Argentina(0, 2, 12); Team por = new Portugal(0, 1, 12); Team frc = new France(0, 2, 11); Team cro = new Croatia(0, 1, 6); Team mor = new Morocco(0, 1, 5); arg.out(); frc.out(); por.out(); cro.out(); mor.out(); . Team score: 0 Team wins: 2 Team all goals: 12 Best player: Lionel Messi Team score: 0 Team wins: 2 Team all goals: 11 Best player: Kylian Mbappé Team score: 0 Team wins: 1 Team all goals: 12 Best player: Cristiano Ronaldo Team score: 0 Team wins: 1 Team all goals: 6 Best player: Luka Modrić Team score: 0 Team wins: 1 Team all goals: 5 Best player: Hakim Ziyech . Part 2 . Add a getAge method in the Person super class | Create a new subclass Student with additional members of your choice to personalize the Student class | Create a new subclass Teacher with additional members of your choice | Override the toString method using the @Override to print a Student and teacher object with new members | Print the student and teacher. | . public class Person { protected String name; protected String birthday; public Person (String name, String birthday) { this.name = name; this.birthday = birthday; } public String getName() { return name; } public int getAge() { return 2022 - Integer.parseInt(birthday); } @Override public String toString() { return &quot;Person (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;)&quot;; } } public class Student extends Person { private int grade; private double gpa; private String extracurricular; public Student (String name, String birthday, int grade, double gpa, String extracurricular) { super(name, birthday); this.grade = grade; this.gpa = gpa; this.extracurricular = extracurricular; } // return gpa public double getGPA() { return gpa; } public String extracurricular() { return extracurricular; } // return grade public int getGrade() { return grade; } @Override public String toString() { return &quot;Student (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, extracurricular: &quot; + extracurricular + &quot;, gpa: &quot; + gpa + &quot;, grade: &quot; + grade + &quot;)&quot;; } } public class Teacher extends Person { private String subject; private int tenureYears; private String degree; public Teacher (String name, String birthday, String subject, int tenureYears, String degree) { super(name, birthday); this.subject = subject; this.tenureYears = tenureYears; this.degree = degree; } // return subject public String getSubject() { return subject; } // return yearsOfExperience public int getTenure() { return tenureYears; } // return degree public String getDegree() { return degree; } @Override public String toString() { return &quot;Teacher (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, subject: &quot; + subject + &quot;, tenureYears: &quot; + tenureYears + &quot;, degree: &quot; + degree + &quot;)&quot;; } } Person wb = new Person(&quot;Warren Buffett&quot;, &quot;1930&quot;); System.out.println(wb.toString()); Person ys = new Student(&quot;yash&quot;, &quot;2005&quot;, 12, 4.2, &quot;Karate&quot;); System.out.println(ys.toString()); Person jm = new Teacher(&quot;John Mortensen&quot;, &quot;1959&quot;, &quot;Computer Science&quot;, 22, &quot;Bachelors of Science in Computer Science&quot;); System.out.println(jm.toString()); . Person (name: Warren Buffett, birthday: 1930) Student (name: yash, birthday: 2005, extracurricular: Karate, gpa: 4.2, grade: 12) Teacher (name: John Mortensen, birthday: 1959, subject: Computer Science, tenureYears: 22, degree: Bachelors of Science in Computer Science) .",
            "url": "https://yashshah138.github.io/Fastpages/week-16/2022/12/12/Unit-09.html",
            "relUrl": "/week-16/2022/12/12/Unit-09.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 08 Tues - 2D Array",
            "content": "Notes . Initializing A 2D Array . Initialize by giving each slot a value | Initialize by giving each slot a size | int[][] nums = new int[rows][columns] | . // Method 1 (value): int[][] numbers1 = {{1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,16}}; String[][] names1 = {{&quot;John&quot;,&quot;James&quot;,&quot;Jay&quot;}, {&quot;Melissa&quot;,&quot;May&quot;,&quot;Maggie&quot;}, {&quot;Bob&quot;,&quot;Burt&quot;,&quot;Billy&quot;}}; char[][] letters1 = {{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;}, {&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;}}; // Method 2 (size): // Array with four rows and 3 columns int[][] numbers2 = new int[4][3]; // Array with 2 rows and 2 columns String[][] names2 = new String[2][2]; // Array with 2 rows and 3 columns char[][] letters2 = new char[2][3]; . Accessing and Changing Elements of 2D Array . Access elements using index of element | . // 2D Array w/ 2 rows and 2 columns int[][] numbers = new int[2][2]; // Setting elements in 2D Array numbers[0][0] = 1; numbers[0][1] = 4; numbers[1][0] = 9; numbers[1][1] = 16; // Looping through the array to print each element for(int i = 0;i&lt;numbers.length;i++) { for(int j = 0; j &lt; numbers[i].length;j++) { //nested for loops System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . 1 4 9 16 . Homework . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . import java.util.*; import java.lang.Math.*; // Create class public class Learning { private int[][] arr = new int[3][3]; private int[][] reversed_arr = new int[3][3]; // Arbitrary values public void origArr() { System.out.println(&quot; nOriginal array:&quot;); // Assign a random value to the 2D array and print it for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // Assign a random value to the 2D array using math.random() arr[i][j] = (int) (Math.random() * 10); System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } } // Reverse the 2D array public void reversedArray() { System.out.println(&quot; nReversed array:&quot;); // Reverse the 2D array and print it for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // Reverses array by going backwards through the original array reversed_arr[i][j] = arr[arr.length - 1 - i][arr[i].length - 1 - j]; System.out.print(reversed_arr[i][j] + &quot; &quot;); } System.out.println(); } } // Multiplies each value in a row and then adds all the products together public int productSum() { int product = 1; int sum = 0; for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { // Multiply product by value at this array index product *= arr[i][j]; } // Add product to sum after all in row were multiplied, then reset product back to 1 sum += product; product = 1; } return sum; } // Input of a position and it returns the corresponding value public int valueOf(int a, int b) { // Try to get array value, return exception if can&#39;t try { return arr[a][b]; } catch (Exception e) { System.out.println(&quot;Error: &quot; + e); return -1; } } // Tester method public static void main(String[] args) { Learning l = new Learning(); l.origArr(); l.reversedArray(); System.out.println(&quot;Value of [1][1]: &quot; + l.valueOf(1, 1)); System.out.println(&quot;Sum of products of rows: &quot; + l.productSum()); Learning w = new Learning(); w.origArr(); w.reversedArray(); System.out.println(&quot;Value of [2][1]: &quot; + w.valueOf(2, 1)); System.out.println(&quot;Sum of products of rows: &quot; + w.productSum()); } } Learning.main(null); . Original array: 9 9 9 7 4 2 7 8 7 Reversed array: 7 8 7 2 4 7 9 9 9 Value of [1][1]: 4 Sum of products of rows: 1177 Original array: 3 2 7 9 3 3 6 3 2 Reversed array: 2 3 6 3 3 9 7 2 3 Value of [2][1]: 3 Sum of products of rows: 159 . Extra Credit . class MonkeyLoop { String [][] monkeys; String [][] cthulhus; public MonkeyLoop() { monkeys = new String[][]{ { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes }, { &quot; _⏄_/ &quot;, //[1][0] chin }, { &quot; --0-- &quot;, //[2][0] body }, { &quot; ⎛ ⎞ &quot; //[3][0] legs }, }; cthulhus = new String[][]{ { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- &quot;, &quot;⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ &quot;, &quot;⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;A story of a Monkey and Cthulhus&quot;); int monkeyCount = monkeys.length; // Missing code for (int i = 1; i &gt;= 1; i--) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array for (int col = 0; col &lt; monkeys[row].length; col++) { System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between each stanza System.out.println(); } } //hint: missing code, another for loop int cthulhuCount = cthulhus[0].length; for (int col1 = 0; col1 &lt; cthulhuCount; col1++) { //cycles through &quot;cells&quot; of 2d array for (int row1 = 0; row1 &lt; 1; row1++){ System.out.print(cthulhus[row1][col1]); } // Spacer System.out.println(); } // End of missing code // System.out.println(cthulhuCount); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . A story of a Monkey and Cthulhus ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ʕง ͠° ͟ل͜ ͡°)ʔ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _⏄_/ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀⠀ --0-- ⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀⠀⠀ ⎛ ⎞ ⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ 0000000000000000000000000000000000 THE END .",
            "url": "https://yashshah138.github.io/Fastpages/week-15/2022/12/06/Unit-08.html",
            "relUrl": "/week-15/2022/12/06/Unit-08.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "2019 FRQ 3 - Calculator",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import java.util.Stack; import java.lang.Math; import java.lang.Double; /* In mathematics, an expression or mathematical expression is a finite combination of symbols that is well-formed according to rules that depend on the context. In computers, expression can be hard to calculate with precedence rules and user input errors to handle computer math we often convert strings into reverse polish notation to handle errors we perform try / catch or set default conditions to trap errors */ public class Calculator { // Key instance variables private String expression; private ArrayList&lt;String&gt; tokens; private ArrayList&lt;String&gt; reverse_polish; private Double result = 0.0; // Helper definition for supported operators private final Map&lt;String, Integer&gt; OPERATORS = new HashMap&lt;&gt;(); { // Map&lt;&quot;token&quot;, precedence&gt; OPERATORS.put(&quot;RT&quot;, 1); OPERATORS.put(&quot;LOG&quot;, 1); OPERATORS.put(&quot;MAX&quot;, 1); OPERATORS.put(&quot;POW&quot;, 2); OPERATORS.put(&quot;^&quot;, 2); OPERATORS.put(&quot;*&quot;, 3); OPERATORS.put(&quot;/&quot;, 3); OPERATORS.put(&quot;%&quot;, 3); OPERATORS.put(&quot;+&quot;, 4); OPERATORS.put(&quot;-&quot;, 4); } // Helper definition for supported operators private final Map&lt;String, Integer&gt; SEPARATORS = new HashMap&lt;&gt;(); { // Map&lt;&quot;separator&quot;, not_used&gt; SEPARATORS.put(&quot; &quot;, 0); SEPARATORS.put(&quot;(&quot;, 0); SEPARATORS.put(&quot;)&quot;, 0); } // Create a 1 argument constructor expecting a mathematical expression public Calculator(String expression) { // original input this.expression = expression; // parse expression into terms this.termTokenizer(); // place terms into reverse polish notation this.tokensToReversePolishNotation(); // calculate reverse polish notation this.rpnToResult(); } // Test if token is an operator private boolean isOperator(String token) { // find the token in the hash map return OPERATORS.containsKey(token); } // Test if token is an separator private boolean isSeparator(String token) { // find the token in the hash map return SEPARATORS.containsKey(token); } // Compare precedence of operators. private Boolean isPrecedent(String token1, String token2) { // token 1 is precedent if it is greater than token 2 return (OPERATORS.get(token1) - OPERATORS.get(token2) &gt;= 0) ; } // Term Tokenizer takes original expression and converts it to ArrayList of tokens private void termTokenizer() { // contains final list of tokens this.tokens = new ArrayList&lt;&gt;(); int start = 0; // term split starting index StringBuilder multiCharTerm = new StringBuilder(); // term holder for (int i = 0; i &lt; this.expression.length(); i++) { Character c = this.expression.charAt(i); if ( isOperator(c.toString() ) || isSeparator(c.toString()) ) { // 1st check for working term and add if it exists if (multiCharTerm.length() &gt; 0) { tokens.add(this.expression.substring(start, i)); } // Add operator or parenthesis term to list if (c != &#39; &#39;) { tokens.add(c.toString()); } // Get ready for next term start = i + 1; multiCharTerm = new StringBuilder(); } else { // multi character terms: numbers, functions, perhaps non-supported elements // Add next character to working term multiCharTerm.append(c); } } // Add last term if (multiCharTerm.length() &gt; 0) { tokens.add(this.expression.substring(start)); } } // Takes tokens and converts to Reverse Polish Notation (RPN), this is one where the operator follows its operands. private void tokensToReversePolishNotation () { // contains final list of tokens in RPN this.reverse_polish = new ArrayList&lt;&gt;(); // stack is used to reorder for appropriate grouping and precedence Stack&lt;String&gt; tokenStack = new Stack&lt;String&gt;(); for (String token : tokens) { switch (token) { // If left bracket push token on to stack case &quot;(&quot;: tokenStack.push(token); break; case &quot;)&quot;: while (tokenStack.peek() != null &amp;&amp; !tokenStack.peek().equals(&quot;(&quot;)) { reverse_polish.add( tokenStack.pop() ); } tokenStack.pop(); break; case &quot;RT&quot;: case &quot;+&quot;: case &quot;-&quot;: case &quot;*&quot;: case &quot;/&quot;: case &quot;%&quot;: case &quot;^&quot;: case &quot;POW&quot;: // While stack // not empty AND stack top element // and is an operator while (tokenStack.size() &gt; 0 &amp;&amp; isOperator(tokenStack.peek())) { if ( isPrecedent(token, tokenStack.peek() )) { reverse_polish.add(tokenStack.pop()); continue; } break; } // Push the new operator on the stack tokenStack.push(token); break; case &quot;pi&quot;: case &quot;PI&quot;: case &quot;Pi&quot;: // recognize pi variable and replace that token with it this.reverse_polish.add(&quot;3.141592653589793238&quot;); break; case &quot;g&quot;: case &quot;G&quot;: // Added a g value to represent earth&#39;s gravitational force this.reverse_polish.add(&quot;9.8&quot;); break; /* For some reason these two functions won&#39;t run */ // case &quot;LOG&quot;: // case &quot;MAX&quot;: default: try { Double.parseDouble(token); } catch(NumberFormatException e) { // Resolve variable to 0 in order for the rest of the function to successfully run. this.reverse_polish.add(&quot;0&quot;); this.expression = &quot;Error with parsing your expression &#39;&quot; + this.expression + &quot; &#39;. Please enter valid numbers, operators, or variables and try again.&quot;; break; } this.reverse_polish.add(token); } } // Empty remaining tokens while (tokenStack.size() &gt; 0) { reverse_polish.add(tokenStack.pop()); } } // Takes RPN and produces a final result private void rpnToResult() { // stack is used to hold operands and each calculation Stack&lt;Double&gt; calcStack = new Stack&lt;Double&gt;(); // RPN is processed, ultimately calcStack has final result for (String token : this.reverse_polish) { // If the token is an operator, calculate if (isOperator(token)) { // Pop the top two entries double a = calcStack.pop(); double b = calcStack.pop(); // Calculate intermediate results switch (token) { // b goes first, as it is popped second and must be on the left to make the equation work case &quot;RT&quot;: // rt is the only exception as the first value is the value of the root being done to the second value result = Math.pow(a, (1/b)); break; case &quot;+&quot;: result = b + a; break; case &quot;-&quot;: result = b - a; break; case &quot;*&quot;: result = b * a; break; case &quot;/&quot;: result = b / a; break; case &quot;%&quot;: result = b % a; break; case &quot;^&quot;: // had to implement POW because the ^ threw an error (likely due to something within the api method) case &quot;POW&quot;: // Using Math.pow() function because it supports doubles result = Math.pow(b,a); break; /* For some reason these two functions won&#39;t run */ // case &quot;MAX&quot;: // result = Math.max(a, b); // break; // case &quot;LOG&quot;: // result = Math.log(a) / Math.log(b); default: break; } // Pop the two top entries // Push intermediate result back onto the stack calcStack.push( result ); } // else the token is a number push it onto the stack else { calcStack.push(Double.valueOf(token)); } } // Pop final result and set as final result for expression this.result = calcStack.pop(); } public String calcToString(boolean x) { if (x) { System.out.println(&quot;--&quot;); System.out.println(&quot;Result: &quot; + this.expression + &quot; = &quot; + this.result); System.out.println(&quot;Tokens: &quot; + this.tokens + &quot; , RPN: &quot; + this.reverse_polish); } String output = this.expression + &quot; = &quot; + this.result; return output; } public String jsonify() { String json = &quot;{ &quot;Expression &quot;: &quot;&quot; + this.expression + &quot; &quot;, &quot;Tokens &quot;: &quot;&quot; + this.tokens + &quot; &quot;, &quot;RPN &quot;: &quot;&quot; + this.reverse_polish + &quot; &quot;, &quot;Result &quot;: &quot; + this.result + &quot; }&quot;; return json; } } // Testing different outputs String result = &quot; &quot;; // Should print 8 Calculator aa = new Calculator(&quot;2 * 2 + 4&quot;); result = aa.calcToString(true); Calculator bb = new Calculator(&quot;2 * ( 2 + 4 )&quot;); result = bb.calcToString(true); // Should print 2. Calculator cc = new Calculator(&quot;( 2 + 4 ) / 3&quot;); result = cc.calcToString(true); // Should print 14 Calculator dd = new Calculator(&quot;10 % 4 * 7&quot;); result = dd.calcToString(true); // USING EXPONENTS - Should print 28 Calculator ee = new Calculator(&quot;3 + 5 ^ 2&quot;); result = ee.calcToString(true); // USING ROOT FUNCTION - Should print 8 Calculator ff = new Calculator(&quot;3 + 2 RT 25&quot;); result = ff.calcToString(true); // USING ROOT FUNCTION WITH PARENTHESES - Should print 3 Calculator gg = new Calculator(&quot;2 RT ( 3 + 6 )&quot;); result = gg.calcToString(true); // USING pi value - should print pi value Calculator hh = new Calculator(&quot;pi * 1&quot;); result = hh.calcToString(true); // USING G VALUE - should print 9.8 Calculator ii = new Calculator(&quot;g * 1&quot;); result = ii.calcToString(true); // Calculator jj = new Calculator(&quot;MAX 5 7&quot;); // result = jj.calcToString(true); // Calculator kk = new Calculator(&quot;LOG 5 2&quot;); // result = kk.calcToString(true); // Calculator errorTest = new Calculator(&quot;m * 1&quot;); // result = errorTest.calcToString(true); . -- Result: 2 * 2 + 4 = 8.0 Tokens: [2, *, 2, +, 4] , RPN: [2, 2, *, 4, +] -- Result: 2 * ( 2 + 4 ) = 12.0 Tokens: [2, *, (, 2, +, 4, )] , RPN: [2, 2, 4, +, *] -- Result: ( 2 + 4 ) / 3 = 2.0 Tokens: [(, 2, +, 4, ), /, 3] , RPN: [2, 4, +, 3, /] -- Result: 10 % 4 * 7 = 14.0 Tokens: [10, %, 4, *, 7] , RPN: [10, 4, %, 7, *] -- Result: 3 + 5 ^ 2 = 28.0 Tokens: [3, +, 5, ^, 2] , RPN: [3, 5, 2, ^, +] -- Result: 3 + 2 RT 25 = 8.0 Tokens: [3, +, 2, RT, 25] , RPN: [3, 2, 25, RT, +] -- Result: 2 RT ( 3 + 6 ) = 3.0 Tokens: [2, RT, (, 3, +, 6, )] , RPN: [2, 3, 6, +, RT] -- Result: pi * 1 = 3.141592653589793 Tokens: [pi, *, 1] , RPN: [3.141592653589793238, 1, *] -- Result: g * 1 = 9.8 Tokens: [g, *, 1] , RPN: [9.8, 1, *] .",
            "url": "https://yashshah138.github.io/Fastpages/week-15/2022/12/04/FRQ3.html",
            "relUrl": "/week-15/2022/12/04/FRQ3.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "College Board Vocab and Implementation",
            "content": "This page will be used to display the learnings from College Board and its requirements . Table of Contents (ToC) . Unit 1 - Primitive Types | Unit 2 - Using Objects | Unit 3 - Boolean Expressions and if Statements | Unit 4 - Iteration | Unit 5 - Writing Classes | Unit 6 - Array | Unit 7 - ArrayList | Unit 8 - 2D Array | Unit 9 - Inheritance | Unit 10 - Recursion | . Unit 1: Primitives . Two main types of data in java primitives int | boolean | char | double | . | objects strings | other classes | . | . | Primitives do not have methods and properties while these are present in classes (ie. String length() method) | Homework from student presentation | . Casting . Casting assigns a different type to a variable when executing code (int to double/float in division to get exact numbers) | When going from float/double to int, the number is truncated (takes the numbers to the left of the decimal point as the answer) | . // Set numbers to variables int x = 7; int y = 2; // Print division of x and y w/o casting (will do floor division) System.out.println(x/y); // Print division of x and y w/ casting (will give exact answer) System.out.println((float)x/(float)y); // Can also work in the reverse order float z = 3.7f; // Printing &quot;z&quot; w/o casting System.out.println(z); // Printing &quot;z&quot; w/ casting as int System.out.println((int)z); . 3 3.5 3.7 3 . Wrapper Class . Used to convert primitive data types to be used in things like ArrayLists | . // assign value to variable int x = 5; // instantiate arraylist of ints ArrayList&lt;Integer&gt; intList = new ArrayList&lt;Integer&gt;(); // create integer from int for wrapper Integer a_wrapper = new Integer(x); intList.add(x); System.out.println(intList); . [5] . Unit 2: Using Objects . Objects are just an instance created out of a class created w/ a constructor (which takes in parameters describing the object | Methods in objects can be void (returns nothing) or have a return type specified | Static methods and properties are tied to class rather than object (ie. same value for all objects) | Methods can be overloaded (have different sets of parameters) as long as order of types differs between method definitions even with same name | Homework from student presentation | . Concatenation . Combine strings using &quot;+&quot; | Use toString() for non string types | . // assignment of variables String x = &quot;Hello &quot;; String y = &quot;Hi &quot;; String z = &quot;Howdy! &quot;; int a = 15; // Concatenate all the strings together System.out.println(x + y + z); // When we concatenate int a to string z, it converts a to a string System.out.println(z + a); . Hello Hi Howdy! Howdy! 15 . Math Class . Can use for generating random number | Use for conducting more complex calculations than &quot;+, -, *, /, %, or //&quot; | . int x = 10; for (int n = 0; n &lt; 3; n++) { int ran_num = (int)(Math.random() * x + 1); System.out.println(ran_num); } . 9 1 5 . Comparing Numbers, Strings, and Objects . Numbers compared using == | Objects compared using .equals() | . int a = 1; int b = 1; int c = 2; String x = &quot;Howdy&quot;; String y = &quot;Howdy&quot;; String z = &quot;Hello&quot;; System.out.println(a == b); System.out.println(a == c); System.out.println(x.equals(y)); System.out.println(x.equals(z)); . true false true false . Unit 3: Booleans and If Statements . Boolean = true or false Created when using comparison == | &lt; | &gt; | . | If statements used to check conditions | . | Homework from student presentation | . Compound Boolean Expression . Compound boolean expressions = made up of many boolean expressions | . boolean x = true; boolean y = false; // compound boolean expressions boolean compound_boolean = !(x &amp;&amp; y) || (x || y) &amp;&amp; !(x || y); // result System.out.println(compound_boolean); . true . De Morgan&#39;s Law . !(a &amp;&amp; b) = !a || !b and !(a || b) = !a &amp;&amp; !b | . boolean a = false; boolean b = true; boolean c = false; boolean d = true; // complicated boolean expression boolean complicated = !((!(a &amp;&amp; b)) || (!(a || b))); // De Morgan&#39;s Law one boolean simplified_one = !((!a || !b) || (!a &amp;&amp; !b)); // De Morgan&#39;s Law two boolean simplified_two = !(!a || !b) &amp;&amp; !(!a &amp;&amp; !b); // print result (should all be same) System.out.println(complicated + &quot; &quot; + simplified_one + &quot; &quot; + simplified_two); . false false false . Unit 4: Iteration . While loop = while condition met | For loop = for temp var in condition | loops can be nested | Homework from student presentation | . For loop . int[] array = {1, 2, 3, 4, 5}; // looping through even numbers System.out.println(&quot;Loop of even numbers through ten&quot;); for (int i = 0; i&lt;10; i+=2) { System.out.print(i); } System.out.println(&quot; nLooping through array&quot;); // looping through array with for loop for (int i = 0; i&lt;array.length; i++) { System.out.print(array[i]); } System.out.println(&quot; nLooping through array using enhanced loop&quot;); // looping through array with enhanced for loop for (int i : array) { System.out.print(i); } . Loop of even numbers through ten 02468 Looping through array 12345 Looping through array using enhanced loop 12345 . While Loop vs Do While Loop . While loops run while a condition is true, the condition is checked before each iteration of the code is run | Do while loops also run while a condition is true, but the condition is checked AFTER each iteration of the code is run This means that no matter what the do block runs at least once before the condition is checked | . | . int i = 0; boolean falseBool = false; // printing even numbers with while loop while (i &lt; 10) { System.out.println(i); i += 2; } // if condition is false while loop does not run at all while (falseBool) { System.out.println(&quot;while loop&quot;); } // if condition is false in do while, the loop runs once do { System.out.println(&quot;do-while loop&quot;); } while (falseBool); . 0 2 4 6 8 do-while loop . Nested Loops . Loops can be used inside each other for better iteration | Especially useful for 2D arrays | . int[][] arr = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; // using nested for loops for 2D array for (int i = 0; i&lt;arr.length; i++) { for (int j = 0; j&lt;arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 7 8 9 . Unit 5: Writing Classes . Classes can be used for creating objects and have two main things: properties and methods | Properties are used to store information about each object of a class (can be made private/public which determines accessibility outside of class) | Methods are used to modify the object &amp; do things | Getter and Setter Methods can be used to modify properties of a class which are made private | Homework from student presentation | . Creating a Class . Defined with camelCase | . // create a class class HelloWorld { // code } . Main Method . Used as tester method | . class HelloWorld { public static void main (String[] args) { HelloWorld object = new HelloWorld(); } } HelloWorld.main(null); . This . The &quot;this&quot; keyword allows you to access properties of the class | See constructor example to see use of this keyword | . Constructor . Constructor is called whenver the object is created, usually initializes fields | Does not return anything because the object is automatically given to the user when constructor is called | . class HelloWorld { int prop1; int prop2; // Constructor here public HelloWorld (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // tester method public static void main (String[] args) { HelloWorld object = new HelloWorld(50, 75); } } HelloWorld.main(null); . Getter Methods . Used to get properties of an object from the outside the class definition | Getters can be applied on only the properties which should be accessed outside the class | . class HelloWorld { int prop1; int prop2; // Constructor here public HelloWorld (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } // tester method public static void main (String[] args) { HelloWorld object = new HelloWorld(50, 75); // using getter to access prop1 System.out.println(object.getProp1()); } } HelloWorld.main(null); . 50 . Setter Methods . These methods allow the properties which should be modifiable to be changed outside the class definition | These methods have a &quot;void&quot; return type since they don&#39;t need to return anything, since they are only setting values | . class HelloWorld { int prop1; int prop2; // Constructor here public HelloWorld (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } // setter allows outside class to set prop1 public void setProp1 (int propVal) { this.prop1 = propVal; } public static void main (String[] args) { HelloWorld object = new HelloWorld(50, 75); // using getter to access prop1 System.out.println(object.getProp1()); // changing value of prop1 object.setProp1(10); // using getter to access new value of prop1 System.out.println(object.getProp1()); } } HelloWorld.main(null); . 50 10 . Access Modifiers . Access modifiers control whether properties and methods can be accessed outside the class | The public means the property/method is accessible outside while if it is private it is not accessible | . class HelloWorld { // prop1 cannot be directly accessed private int prop1; // prop2 can be directly accessed public int prop2; // Constructor here public HelloWorld (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } // setter allows outside class to set prop1 public void setProp1 (int propVal) { this.prop1 = propVal; } public static void main (String[] args) { HelloWorld object = new HelloWorld(50, 75); // would throw error // object.prop1 = 10; // works (because public) object.prop2 = 100; System.out.println(object.prop2); } } HelloWorld.main(null); . 100 . Static Methods . Static properties and methods are part of the class rather than each object | Static methods do not require an object, and static properties only have one instance that is the same for all objects | . class HelloWorld { // static method static String awesomeMethod (String a) { return a + &quot; awesome&quot;; } // static property static int staticProp = 17; public static void main(String[] args) { // no object needed for any of this System.out.println(HelloWorld.awesomeMethod(&quot;method&quot;)); System.out.println(HelloWorld.staticProp); } } HelloWorld.main(null); . method awesome 17 .",
            "url": "https://yashshah138.github.io/Fastpages/week-14/2022/12/02/Vocab.html",
            "relUrl": "/week-14/2022/12/02/Vocab.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "AP CSA MC Test Corrections and Reflection",
            "content": "Final Exam Reflection . I got 36/40. I think I did the best that I could, however I think I did better than I would on the AP test because I was not going with the timing of the test. Additionally, there were a few problems that really tricked me, such as the one that returned the recursive function twice instead of just once. Overall, I think that though this is a pretty good score. I need to pay more careful attention to the full question and not skim over the questions. I plan to study these concepts further and do better on the next one as a result. . . . . .",
            "url": "https://yashshah138.github.io/Fastpages/2022/11/07/Test-Corrections.html",
            "relUrl": "/2022/11/07/Test-Corrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "ArrayLists - AP Test Prep",
            "content": "ArrayList&lt;String&gt; songs = new ArrayList&lt;String&gt;(); songs.add(&quot;Shake It Off&quot;); songs.add(&quot;In Da Club&quot;); songs.add(&quot;Party In The USA&quot;); songs.add(&quot;I Ain&#39;t Worried&quot;); songs.add(&quot;One Dance&quot;); songs.add(&quot;I Wanna Benz&quot;); System.out.println(songs); . [Shake It Off, In Da Club, Party In The USA, I Ain&#39;t Worried, One Dance, I Wanna Benz] . // size() System.out.println(&quot;- size()&quot;); System.out.println(&quot;There are &quot; + songs.size() + &quot; terms in the ArrayList songs: &quot; + songs); . - size() There are 6 terms in the ArrayList songs: [Shake It Off, In Da Club, Party In The USA, I Ain&#39;t Worried, One Dance, I Wanna Benz] . // Remove(int index or element songs.remove(3); System.out.println(&quot;- remove(int index)&quot;); System.out.println(songs); . - remove(int index) [Shake It Off, In Da Club, Party In The USA, One Dance, I Wanna Benz] . // hashCode() System.out.println(&quot;- hashCode()&quot;); System.out.println(songs.hashCode()); . - hashCode() -1832161442 . // sort(Comparator comp) System.out.println(&quot;- sort(Comparator comp)&quot;); System.out.println(&quot;ArrayList before sort: &quot; + songs); Collections.sort(songs); System.out.println(&quot;ArrayList after sort: &quot; + songs); . - sort(Comparator comp) ArrayList before sort: [Shake It Off, In Da Club, Party In The USA, One Dance, I Wanna Benz] ArrayList after sort: [I Wanna Benz, In Da Club, One Dance, Party In The USA, Shake It Off] . public class AscendingOrder { public static void main(String args[]) { // creating object of ArrayList class ArrayList&lt;Integer&gt; arrlist = new ArrayList&lt;Integer&gt;(); // adding elements to the ArrayList arrlist.add(1); arrlist.add(3); arrlist.add(2); // printing the unsorted ArrayList System.out.println(&quot;Before Sorting: &quot;+ arrlist); // Sorting ArrayList in ascending Order Collections.sort(arrlist); // printing the sorted ArrayList System.out.println(&quot;After Sorting: &quot;+ arrlist); } } AscendingOrder.main(null); . Before Sorting: [1, 3, 2] After Sorting: [1, 2, 3] . Homework (Due Monday 8AM) . Create an ArrayList that includes 2 of the 4 factors listed below. Sort an ArrayList in descending order and swap the first and last elements | Find and display the hashCode of an Arraylist before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list | . | .",
            "url": "https://yashshah138.github.io/Fastpages/week-10/2022/10/26/ArrayList-Presentation.html",
            "relUrl": "/week-10/2022/10/26/ArrayList-Presentation.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 06 Tue - Arrays",
            "content": "Write a class called ArrayMethods that contains two methods that utilize/manipulate an array. . import java.util.*; import java.io.*; public class ArrayMethods { private int[] values; public ArrayMethods(int[] array) { this.values = array; } public int[] getArray() { return this.values; } public String getString() { return Arrays.toString(this.values); } public void swap() { int temp = values[0]; values[0] = values[values.length - 1]; values[values.length - 1] = temp; } public void replaceAll() { for (int i = 0; i &lt; values.length; i++) { values[i] = 0; } } public boolean increasingOrder() { for (int i = 0; i &lt; this.values.length - 1; i++) { if (values[i] &gt; values[i+1]) { return false; } return true; } return false; } // Tester Method public static void main() { ArrayMethods method = new ArrayMethods(new int[]{1,2,3,3,4,5,5}); System.out.println(&quot;~~~ Array ~~~&quot;); System.out.println(method.getString()); System.out.println(&quot;~~~ Increasing Order ~~~&quot;); System.out.println(method.increasingOrder()); System.out.println(&quot;~~~ Swap First and Last ~~~&quot;); method.swap(); System.out.println(method.getString()); System.out.println(&quot;~~~ Replace All W/ 0 ~~~&quot;); method.replaceAll(); System.out.println(method.getString()); } } ArrayMethods.main(); public class Array { public static void main(String[] args) { int[] array = {1, 2, 3, 4, 5, 4, 3}; System.out.println(&quot;~~~ Duplicates ~~~&quot;); System.out.println(Arrays.toString(array)); for (int i = 0; i &lt; array.length-1; i++) { for (int j = i+1; j &lt; array.length; j++) { if ((array[i] == array[j]) &amp;&amp; (i != j)) { System.out.println(array[j]); } } } } } Array.main(null); . ~~~ Array ~~~ [1, 2, 3, 3, 4, 5, 5] ~~~ Increasing Order ~~~ true ~~~ Swap First and Last ~~~ [5, 2, 3, 3, 4, 5, 1] ~~~ Replace All W/ 0 ~~~ [0, 0, 0, 0, 0, 0, 0] ~~~ Duplicates ~~~ [1, 2, 3, 4, 5, 4, 3] 3 4 .",
            "url": "https://yashshah138.github.io/Fastpages/week-10/2022/10/25/Unit-06.html",
            "relUrl": "/week-10/2022/10/25/Unit-06.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 05 Thu - Writing Classes",
            "content": "2021 FRQ 1A . public int scoreGuess (String guess){ int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()). equals(guess)) { count++; } } return count * Math.pow(guess.length(), 2); } . 2021 FRQ 3A . public void addMembers (String[] names, int gradYear) { for (string n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } .",
            "url": "https://yashshah138.github.io/Fastpages/week-9/2022/10/20/Unit-05.html",
            "relUrl": "/week-9/2022/10/20/Unit-05.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 04 Wed - Iteration",
            "content": "Part 1 - Find on the bottom of the Jupyter Notebook linked on slide 2 . Choose ONE . Write a program where the user inputs their monthly budget. The loop should then ask the user to input each of their monthly expenses. These expenses should be kept in a running total. The final output should display if the user is over or under their budget for the month, and by how much. . | Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . | import java.util.Scanner; import java.util.Random; public class NumberGuessingGame { public static void main(String[] args) { int randomNumber, userNumber = 0; final int MAX = 100; char playGame = &#39;y&#39;; Random generator = new Random(); // ask user if they wish to play System.out.println(&quot;Would you like to play the Number Guessing y / n&quot;); Scanner scan = new Scanner(System.in); playGame = scan.next().charAt(0); //The loop controlling the game while (playGame == &#39;y&#39;) { if (playGame != &#39;y&#39;) break; randomNumber = generator.nextInt(MAX) + 1; //Creating a flag to control the inner loop int correct = 0; //The loop to control the round. while (correct == 0){ System.out.println(&quot;Please pick a number between 1 and 100&quot;); userNumber = scan.nextInt(); // high and low sugguestion if (userNumber &gt; randomNumber) System.out.println(&quot;Number is too high, try something lower. n&quot;); if (userNumber &lt; randomNumber) System.out.println(&quot;Number is too low, try something higher. n&quot;); if (userNumber == randomNumber) { System.out.println(randomNumber + &quot; number is correct!&quot;); System.out.println(&quot;Thank you for playing!&quot;); correct = 1; } } } } } NumberGuessingGame.main(null); . Would you like to play the Number Guessing y / n Please pick a number between 1 and 100 Number is too high, try something lower. Please pick a number between 1 and 100 Number is too high, try something lower. Please pick a number between 1 and 100 Number is too low, try something higher. Please pick a number between 1 and 100 Number is too high, try something lower. Please pick a number between 1 and 100 Number is too high, try something lower. Please pick a number between 1 and 100 Number is too low, try something higher. Please pick a number between 1 and 100 17 number is correct! Thank you for playing! Please pick a number between 1 and 100 . java.util.InputMismatchException: null at java.base/java.util.Scanner.throwFor(Scanner.java:939) at java.base/java.util.Scanner.next(Scanner.java:1594) at java.base/java.util.Scanner.nextInt(Scanner.java:2258) at java.base/java.util.Scanner.nextInt(Scanner.java:2212) at NumberGuessingGame.main(#18:1) at .(#32:1) . Part 2 - Complete this Homework Quiz . -image: images/Iteration-score.png .",
            "url": "https://yashshah138.github.io/Fastpages/week-9/2022/10/19/Unit-04.html",
            "relUrl": "/week-9/2022/10/19/Unit-04.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 03 Tue - Boolean Expressions and if Statements",
            "content": "2009 FRQ Q3B . public int getChargeStartTime (int chargeTime) { int startHour = 0; int lowPrice = 500_000; for (int x = 0; x &lt; 23; x++) { if (lowPrice &gt; getChargingCost(x, chargeTime)) { lowPrice = getChargingCost(x, chargeTime); startHour = x; } } return startHour; } . 2017 FRQ Q1B . public boolean isStrictlyIncreasing () { boolean increasing = true; for (int i = 1; i &lt; digitListSize(); i++) { if (digitList.get(i-1) &gt;= digitList.get(i)) { increasing = false; } } return increasing; } . 2019 FRQ Q3B . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int numOpen = 0, numClosed = 0; for(String d : delimiters) { if(d.equals(openDel)) numOpen++; if(d.equals(closeDel)) numClosed++; if(numClosed &gt; numOpen) return false; } return numOpen == numClosed; } .",
            "url": "https://yashshah138.github.io/Fastpages/week-9/2022/10/18/Unit-03.html",
            "relUrl": "/week-9/2022/10/18/Unit-03.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 02 Thu - Using Objects",
            "content": "Goblin Fight . import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Jeff Bezos&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Elon Musk&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Jeff Bezos takes 1 damage Jeff Bezos HP: 12 Elon Musk takes 2 damage Elon Musk HP: 1 Elon Musk missed! Jeff Bezos HP: 12 Elon Musk takes 2 damage Elon Musk HP: -1 Elon Musk has perished .",
            "url": "https://yashshah138.github.io/Fastpages/week-8/2022/10/13/Unit-02.html",
            "relUrl": "/week-8/2022/10/13/Unit-02.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 01 Wed - Primitive Types",
            "content": "Notes . Declaring Variables . Variables defined within a method are local variables | Int holds wh ole numbers | You need an initial value in order to change it or increment it (usually set to 0) | . public class Variables { public static void main(String[] args) { int x; x = 90; x = 5; x = x + 1; System.out.println(&quot;The variable x = &quot; + x); } } Variables.main(null) . The variable x = 6 . Primitive Data Types . Byte: minimum value of -128 and maximum value of 127 (inclusive). It is useful for saving memory in large arrays | Short: Minimum value of -32,768 and maximum value of 32,767. Same purpose as Byte | Int: Any integer or whole number | Long: Greater range than int | Float: floating point numbers that tend to have decimals | Double: not good for precise data | Boolean: logic that evaluates whether a condition is true or false | Char: data type that is used to store a single character (must be in &#39;single quotes&#39;) | public class PrimitiveDataTypes { public static void main(String[] args) { int a = 5; double b = 5.0; b = 3; // only works for double a = (int) 5.999; // casting cuts off everything after the decimal System.out.println(a); boolean c = true; c = false; System.out.println(c); char d = &#39;D&#39;; System.out.println(d); } } PrimitiveDataTypes.main(null) . 5 false D . Homework . 2006 FRQ 2A . public double purchasePrice () { double taxTotal = getListPrice() * taxRate; return taxTotal + getListPrice(); } . 2006 FRQ 3A . public int compareCustomer (Customer other) { int c = getName().compareTo(other.getName()); if (c != 0) { return c; } else { int rd = other.getID(); if (getID() = rd) { return 1; } else if (getID() &lt; rd) { return -1; } else { return 0; } } } .",
            "url": "https://yashshah138.github.io/Fastpages/week-8/2022/10/12/Unit-01.html",
            "relUrl": "/week-8/2022/10/12/Unit-01.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "ArrayLists",
            "content": "Lists and ArrayLists . import java.util.ArrayList; import java.util.Comparator; // Create an ArrayList object ArrayList&lt;String&gt; artists = new ArrayList&lt;String&gt;(); // add(int index, element) artists.add(&quot;Taylor Swift&quot;); artists.add(&quot;50 Cent&quot;); artists.add(&quot;Miley Cyrus&quot;); System.out.println(&quot;- add(int index, element)&quot;); System.out.println(artists + &quot; n&quot;); // addAll(int index, Collection collection) ArrayList&lt;String&gt; songs = new ArrayList&lt;String&gt;(); songs.add(&quot;Shake It Off&quot;); songs.add(&quot;In Da Club&quot;); songs.add(&quot;Party In The USA&quot;); artists.addAll(songs); System.out.println(&quot;- addAll(int index, Collection collection)&quot;); System.out.println(artists + &quot; n&quot;); // size() System.out.println(&quot;- size()&quot;); System.out.println(&quot;There are &quot; + artists.size() + &quot; terms in the ArrayList artists&quot;); System.out.println(&quot;There are &quot; + songs.size() + &quot; terms in the ArrayList songs&quot; + &quot; n&quot;); // clear() songs.clear(); System.out.println(&quot;- clear()&quot;); System.out.println(songs+ &quot; n&quot;); // remove(int index) artists.remove(5); System.out.println(&quot;- remove(int index)&quot;); System.out.println(artists + &quot; n&quot;); // remove(element) artists.remove(&quot;Miley Cyrus&quot;); System.out.println(&quot;- remove(element)&quot;); System.out.println(artists + &quot; n&quot;); // get(int index) System.out.println(&quot;- get(int index)&quot;); System.out.println(artists.get(1) + &quot; n&quot;); // set(int index, element) artists.set(3, &quot;Candy Shop&quot;); System.out.println(&quot;- set(int index, element)&quot;); System.out.println(artists + &quot; n&quot;); // indexOf(element) System.out.println(&quot;- indexOf(element)&quot;); System.out.println(artists.indexOf(&quot;50 Cent&quot;) + &quot; n&quot;); // lastIndexOf(element) System.out.println(&quot;- lastIndexOf(element)&quot;); System.out.println(artists.indexOf(&quot;Candy Shop&quot;) + &quot; n&quot;); // equals(element) System.out.println(&quot;- equals(element)&quot;); System.out.println(artists.equals(&quot;Snoop Dogg&quot;)); // hashCode() System.out.println(&quot; n&quot; + &quot;- hashCode()&quot;); System.out.println(artists.hashCode() + &quot; n&quot;); // isEmpty() System.out.println(&quot;- isEmpyty()&quot;); System.out.println(artists.isEmpty() + &quot; n&quot;); // contains(element) System.out.println(&quot;- contains(element)&quot;); System.out.println(artists.contains(&quot;50&quot;) + &quot; n&quot;); // containsAll(Collection collection) System.out.println(&quot;- containsAll(Collection collection)&quot;); System.out.println(artists.contains(songs) + &quot; n&quot;); // sort(Comparator comp) System.out.println(&quot;- sort(Comparator comp)&quot;); artists.sort(Comparator.naturalOrder()); System.out.println(artists); . - add(int index, element) [Taylor Swift, 50 Cent, Miley Cyrus] - addAll(int index, Collection collection) [Taylor Swift, 50 Cent, Miley Cyrus, Shake It Off, In Da Club, Party In The USA] - size() There are 6 terms in the ArrayList artists There are 3 terms in the ArrayList songs - clear() [] - remove(int index) [Taylor Swift, 50 Cent, Miley Cyrus, Shake It Off, In Da Club] - remove(element) [Taylor Swift, 50 Cent, Shake It Off, In Da Club] - get(int index) 50 Cent - set(int index, element) [Taylor Swift, 50 Cent, Shake It Off, Candy Shop] - indexOf(element) 1 - lastIndexOf(element) 3 - equals(element) false - hashCode() -1198696971 - isEmpyty() false - contains(element) false - containsAll(Collection collection) false - sort(Comparator comp) [50 Cent, Candy Shop, Shake It Off, Taylor Swift] .",
            "url": "https://yashshah138.github.io/Fastpages/week-7/2022/10/10/ArrayLists.html",
            "relUrl": "/week-7/2022/10/10/ArrayLists.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Arrays and Images",
            "content": "Image Manipulation . Continue to work with Classes, Arrays, and 2D arrays. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyScaleFile; private String redScaleFile; private String blueScaleFile; private String greenScaleFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyScaleFile = this.outDir + &quot;Grey_&quot; + name + &quot;.&quot; + ext; this.redScaleFile = this.outDir + &quot;Red_&quot; + name + &quot;.&quot; + ext; this.blueScaleFile = this.outDir + &quot;Blue_&quot; + name + &quot;.&quot; + ext; this.greenScaleFile = this.outDir + &quot;Green_&quot; + name + &quot;.&quot; + ext; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public void greyScale() { BufferedImage img = null; try { File file = new File(this.greyScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int grey = (int)(col.getRed()*0.3 + col.getGreen()*0.59 + col.getBlue()*0.11); try { Color rgb = new Color(grey, grey, grey); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greyScaleFile)); } catch (Exception ex) { } } public void redScale() { BufferedImage img = null; try { File file = new File(this.redScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); try { Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.redScaleFile)); } catch (Exception ex) { } } public void greenScale() { BufferedImage img = null; try { File file = new File(this.greenScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); try { Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greenScaleFile)); } catch (Exception ex) { } } public void blueScale() { BufferedImage img = null; try { File file = new File(this.blueScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); try { Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.blueScaleFile)); } catch (Exception ex) { } } // tester/driver public static void main(String[] args) throws IOException { Pics ascii = new Pics(&quot;Java&quot;, &quot;png&quot;); ascii.printStats(&quot;Original&quot;); ascii.resize(33); ascii.printStats(&quot;Scaled&quot;); ascii.convertToAscii(); Pics grey = new Pics(&quot;Java&quot;, &quot;png&quot;); grey.greyScale(); Pics red = new Pics(&quot;Java&quot;, &quot;png&quot;); red.redScale(); Pics green = new Pics(&quot;Java&quot;, &quot;png&quot;); green.greenScale(); Pics blue = new Pics(&quot;Java&quot;, &quot;png&quot;); blue.blueScale(); } } Pics.main(null); . Original: 227380 389x413 images/MonaLisa.png Scaled: 23777 128x136 images/tmp/MonaLisa.png . ASCII: https://github.com/YashShah138/Fastpages/blob/master/_notebooks/images/tmp/MonaLisa.txt . . . . . .",
            "url": "https://yashshah138.github.io/Fastpages/week-6/2022/10/03/Arrays-And-Images.html",
            "relUrl": "/week-6/2022/10/03/Arrays-And-Images.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "APIs",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; // RapidAPI header https://rapidapi.com/dariuxmx/api/formula-1-standings/ HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://formula-1-standings.p.rapidapi.com/races&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;80e73128e0mshda8c95123266391p176951jsnbc06ff234f92&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;formula-1-standings.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); // RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); // RapidAPI Body System.out.println(response.body()); . {&#34;results&#34;:[{&#34;race_name&#34;:&#34;Pre-Season Testing 2022&#34;,&#34;race_date&#34;:&#34;10 – 12 March 2022&#34;,&#34;race_location&#34;:&#34;Bahrain International Circuit, Bahrain&#34;},{&#34;race_name&#34;:&#34;Bahrain Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;18 – 20 March 2022&#34;,&#34;race_location&#34;:&#34;Bahrain International Circuit, Bahrain&#34;},{&#34;race_name&#34;:&#34;Saudi Arabian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;25 – 27 March 2022&#34;,&#34;race_location&#34;:&#34;Jeddah Corniche Circuit, Saudi Arabia&#34;},{&#34;race_name&#34;:&#34;Australian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;8 – 10 April 2022&#34;,&#34;race_location&#34;:&#34;Melbourne Grand Prix Circuit, Australia&#34;},{&#34;race_name&#34;:&#34;Emilia Romagna Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;22 – 24 April 2022&#34;,&#34;race_location&#34;:&#34;Autodromo Enzo e Dino Ferrari, Italy&#34;},{&#34;race_name&#34;:&#34;Miami Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;6 – 8 May 2022&#34;,&#34;race_location&#34;:&#34;Miami International Autodrome, United States&#34;},{&#34;race_name&#34;:&#34;Spanish Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;20 – 22 May 2022&#34;,&#34;race_location&#34;:&#34;Circuit de Barcelona-Catalunya, Spain&#34;},{&#34;race_name&#34;:&#34;Monaco Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;27 – 29 May 2022&#34;,&#34;race_location&#34;:&#34;Circuit de Monaco, Monaco&#34;},{&#34;race_name&#34;:&#34;Azerbaijan Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;10 – 12 June 2022&#34;,&#34;race_location&#34;:&#34;Baku City Circuit, Azerbaijan&#34;},{&#34;race_name&#34;:&#34;Canadian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;17 – 19 June 2022&#34;,&#34;race_location&#34;:&#34;Circuit Gilles Villeneuve, Canada&#34;},{&#34;race_name&#34;:&#34;British Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;1 – 3 July 2022&#34;,&#34;race_location&#34;:&#34;Silverstone Circuit, United Kingdom&#34;},{&#34;race_name&#34;:&#34;Austrian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;8 – 10 July 2022&#34;,&#34;race_location&#34;:&#34;Red Bull Ring, Austria&#34;},{&#34;race_name&#34;:&#34;French Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;22 – 24 July 2022&#34;,&#34;race_location&#34;:&#34;Circuit Paul Ricard, France&#34;},{&#34;race_name&#34;:&#34;Hungarian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;29 – 31 July 2022&#34;,&#34;race_location&#34;:&#34;Hungaroring, Hungary&#34;},{&#34;race_name&#34;:&#34;Belgian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;26 – 28 August 2022&#34;,&#34;race_location&#34;:&#34;Circuit de Spa-Francorchamps, Belgium&#34;},{&#34;race_name&#34;:&#34;Dutch Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;2 – 4 September 2022&#34;,&#34;race_location&#34;:&#34;Circuit Zandvoort, Netherlands&#34;},{&#34;race_name&#34;:&#34;Italian Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;9 – 11 September 2022&#34;,&#34;race_location&#34;:&#34;Autodromo Nazionale Monza, Italy&#34;},{&#34;race_name&#34;:&#34;Singapore Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;30 September – 2 October 2022&#34;,&#34;race_location&#34;:&#34;Marina Bay Street Circuit, Singapore&#34;},{&#34;race_name&#34;:&#34;Japanese Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;7 – 9 October 2022&#34;,&#34;race_location&#34;:&#34;Suzuka International Racing Course, Japan&#34;},{&#34;race_name&#34;:&#34;United States Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;21 – 23 October 2022&#34;,&#34;race_location&#34;:&#34;Circuit of the Americas, United States&#34;},{&#34;race_name&#34;:&#34;Mexico City Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;28 – 30 October 2022&#34;,&#34;race_location&#34;:&#34;Autodromo Hermanos Rodriguez, Mexico&#34;},{&#34;race_name&#34;:&#34;São Paulo Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;11 – 13 November 2022&#34;,&#34;race_location&#34;:&#34;Autódromo José Carlos Pace, Brazil&#34;},{&#34;race_name&#34;:&#34;Abu Dhabi Grand Prix 2022&#34;,&#34;race_date&#34;:&#34;18 – 20 November 2022&#34;,&#34;race_location&#34;:&#34;Yas Marina Circuit, United Arab Emirates&#34;}]} .",
            "url": "https://yashshah138.github.io/Fastpages/week-6/2022/10/03/APIs.html",
            "relUrl": "/week-6/2022/10/03/APIs.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Virtual Private Networks",
            "content": "What Are Virtual Private Networks (VPN) . VPNs establish a protected network connection when using public networks. VPNs encrypt your internet traffic and disguise your online identity. This makes it more difficult for third parties to track your activities online and steal data. . How Does A VPN Work . A VPN hides your IP address by letting the network redirect it through a specially configured remote server run by a VPN host. This means that if you surf online with a VPN, the VPN server becomes the source of your data. This means your Internet Service Provider (ISP) and other third parties cannot see which websites you visit or what data you send and receive online. A VPN works like a filter that turns all your data into “gibberish”. Even if someone were to get their hands on your data, it would be useless. . Setting Up A VPN (MacOS) . Navigate to your browser and search for a VPN and follow the websites directions for installation | Go to “System Preferences” and then “Network” | Click on the plus sign in the bottom left corner and use the drop-down menu to choose your VPN | Fill in the details for your chosen VPN in the fields “VPN Type” and “Service Name” | Create a new VPN network and fill in your “Server Address,” “Remote ID” and “Local ID” | Enter “Authentication Settings” and add your username and password | Click “OK” and Connect your VPN | Setting Up A VPN (Windows) . Navigate to your browser and search for a VPN and follow the websites directions for installation | Move into “Settings” and click on “Network” and then “VPN” | Click “Add a VPN” and fill out the fields for “Server Name,” “VPN Type” and your account information, which should be shared by the VPN provider you chose | Save your VPN | Go back into “VPN,” click on your newly added account and press “Connect” | Using A VPN . There are a host of different reasons to use a VPN. Below, I have listed a few reasons to sue a VPN . Make public Wi-Fi more secure | Protect your mobile devices | Hide your IP address | Data Privacy From Your Internet Service Provider | Data Privacy From the Apps and Services You Use | Access to Any Content in Any Place (Streaming shows that are on other countries Netflix) | . Recommended Software (Free) . Proton VPN Free | Privado VPN | Windscribe | Atlas VPN | Hide.me | . Recommended Software (Paid) . ExpressVPN (~$9/month) | SurfShark ($5/month) | NordVPN ($3.69/month for 2 years) | ProtonVPN ($6/month) | IPVanish ($3.33/month for the first year, then $7.5/month) | .",
            "url": "https://yashshah138.github.io/Fastpages/extras/2022/09/27/VPNs.html",
            "relUrl": "/extras/2022/09/27/VPNs.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Tic Tac Toe",
            "content": "// A simple program to demonstrate // Tic-Tac-Toe Game. import java.util.*; public class GFG { static String[] board; static String turn; // CheckWinner method will // decide the combination // of three box given below. static String checkWinner() { for (int a = 0; a &lt; 8; a++) { String line = null; switch (a) { case 0: line = board[0] + board[1] + board[2]; break; case 1: line = board[3] + board[4] + board[5]; break; case 2: line = board[6] + board[7] + board[8]; break; case 3: line = board[0] + board[3] + board[6]; break; case 4: line = board[1] + board[4] + board[7]; break; case 5: line = board[2] + board[5] + board[8]; break; case 6: line = board[0] + board[4] + board[8]; break; case 7: line = board[2] + board[4] + board[6]; break; } //For X winner if (line.equals(&quot;XXX&quot;)) { return &quot;X&quot;; } // For O winner else if (line.equals(&quot;OOO&quot;)) { return &quot;O&quot;; } } for (int a = 0; a &lt; 9; a++) { if (Arrays.asList(board).contains( String.valueOf(a + 1))) { break; } else if (a == 8) { return &quot;draw&quot;; } } // To enter the X Or O at the exact place on board. System.out.println(turn + &quot;&#39;s turn; enter a slot number to place &quot; + turn + &quot; in: &quot;); return null; } // To print out the board. /* |||| | 1 | 2 | 3 | |--| | 4 | 5 | 6 | |--| | 7 | 8 | 9 | ||||*/ static void printBoard() { System.out.println(&quot;||||&quot;); System.out.println(&quot;| &quot; + board[0] + &quot; | &quot; + board[1] + &quot; | &quot; + board[2] + &quot; |&quot;); System.out.println(&quot;|--|&quot;); System.out.println(&quot;| &quot; + board[3] + &quot; | &quot; + board[4] + &quot; | &quot; + board[5] + &quot; |&quot;); System.out.println(&quot;|--|&quot;); System.out.println(&quot;| &quot; + board[6] + &quot; | &quot; + board[7] + &quot; | &quot; + board[8] + &quot; |&quot;); System.out.println(&quot;||||&quot;); } public static void main(String[] args) { Scanner in = new Scanner(System.in); board = new String[9]; turn = &quot;X&quot;; String winner = null; for (int a = 0; a &lt; 9; a++) { board[a] = String.valueOf(a + 1); } System.out.println(&quot;Welcome to 3x3 Tic Tac Toe.&quot;); printBoard(); System.out.println(&quot;X will play first. Enter a slot number to place X in: &quot;); while (winner == null) { int numInput; // Exception handling. // numInput will take input from user like from 1 to 9. // If it is not in range from 1 to 9. // then it will show you an error &quot;Invalid input.&quot; try { numInput = in.nextInt(); if (!(numInput &gt; 0 &amp;&amp; numInput &lt;= 9)) { System.out.println( &quot;Invalid input; re-enter slot number:&quot;); continue; } } catch (InputMismatchException e) { System.out.println( &quot;Invalid input; re-enter slot number:&quot;); continue; } // This game has two player x and O. // Here is the logic to decide the turn. if (board[numInput - 1].equals( String.valueOf(numInput))) { board[numInput - 1] = turn; if (turn.equals(&quot;X&quot;)) { turn = &quot;O&quot;; } else { turn = &quot;X&quot;; } printBoard(); winner = checkWinner(); } else { System.out.println( &quot;Slot already taken; re-enter slot number:&quot;); } } // If no one win or lose from both player x and O. // then here is the logic to print &quot;draw&quot;. if (winner.equalsIgnoreCase(&quot;draw&quot;)) { System.out.println( &quot;It&#39;s a draw! Thanks for playing.&quot;); } // For winner -to display Congratulations! message. else { System.out.println( &quot;Congratulations! &quot; + winner + &quot; won! Thanks for playing.&quot;); } } } GFG.main(null); . Welcome to 3x3 Tic Tac Toe. |||| | 1 | 2 | 3 | |--| | 4 | 5 | 6 | |--| | 7 | 8 | 9 | |||| X will play first. Enter a slot number to place X in: |||| | X | 2 | 3 | |--| | 4 | 5 | 6 | |--| | 7 | 8 | 9 | |||| O&#39;s turn; enter a slot number to place O in: |||| | X | 2 | O | |--| | 4 | 5 | 6 | |--| | 7 | 8 | 9 | |||| X&#39;s turn; enter a slot number to place X in: |||| | X | 2 | O | |--| | X | 5 | 6 | |--| | 7 | 8 | 9 | |||| O&#39;s turn; enter a slot number to place O in: |||| | X | 2 | O | |--| | X | 5 | O | |--| | 7 | 8 | 9 | |||| X&#39;s turn; enter a slot number to place X in: |||| | X | 2 | O | |--| | X | 5 | O | |--| | X | 8 | 9 | |||| Congratulations! X won! Thanks for playing. .",
            "url": "https://yashshah138.github.io/Fastpages/week-5/extras/2022/09/26/Tic-Tac-Toe.html",
            "relUrl": "/week-5/extras/2022/09/26/Tic-Tac-Toe.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "JavaScript Tutorial",
            "content": "Output To Console . // Print Hello World console.log(&quot;Hello World!&quot;); // Print Using var assignment var text = &quot;AP CSA IS GREAT!!&quot;; console.log(text); // Print Using Functions var message = &quot;Class of 2022&quot; function print(output) { console.log(output); } print(message); // Print Reusing Functions print(&quot;RAYJ is the best team!&quot;); . Hello World! AP CSA IS GREAT!! Class of 2022 RAYJ is the best team! . function printType(output) { console.log(typeof output + &quot;: &quot; + output); } printType(&quot;AP CSA&quot;); printType(2023); printType([1, 2, 3]); . string: AP CSA number: 2023 object: 1,2,3 . Building a Person Class + JSON . // define a function to hold data for a Person function Person(name, song, artist, releaseYear) { this.name = name; this.song = song; this.artist = artist; this.releaseYear = releaseYear; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, song: this.song, artist: this.artist, releaseYear: this.releaseYear, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable sponsor var sponsor = new Person(&quot;Mr. M&quot;, &quot;Stayin&#39; Alive&quot;, &quot;Bee Gees&quot;, 1977); // object type is easy to work with in JavaScript printType(sponsor); // before role printType(sponsor.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with sponsor sponsor.setRole(&quot;Sponsor&quot;); // set the role printType(sponsor); printType(sponsor.toJSON()); . object: [object Object] string: {&#34;name&#34;:&#34;Mr. M&#34;,&#34;song&#34;:&#34;Stayin&#39; Alive&#34;,&#34;artist&#34;:&#34;Bee Gees&#34;,&#34;releaseYear&#34;:1977,&#34;role&#34;:&#34;&#34;} object: [object Object] string: {&#34;name&#34;:&#34;Mr. M&#34;,&#34;song&#34;:&#34;Stayin&#39; Alive&#34;,&#34;artist&#34;:&#34;Bee Gees&#34;,&#34;releaseYear&#34;:1977,&#34;role&#34;:&#34;Sponsor&#34;} . // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, song: this.song, artist: this.artist, releaseYear: this.releaseYear, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable sponsor var sponsor = new Person(&quot;Mr. M&quot;, &quot;Stayin&#39; Alive&quot;, &quot;Bee Gees&quot;, 1977); // object type is easy to work with in JavaScript printType(sponsor.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with sponsor sponsor.setRole(&quot;Sponsor&quot;); // set the role printType(sponsor.toJSON()); // define a student Array of Person(s) var teammate = [ new Person(&quot;Rithwikh&quot;, &quot;Drop It Like It&#39;s Hot&quot;, &quot;Snoop Dogg&quot;, 2004), new Person(&quot;Aidan&quot;, &quot;Ms. Jackson&quot;, &quot;OutKast&quot;, 2000), new Person(&quot;Jun&quot;, &quot;Ignition&quot;, &quot;R. Kelly&quot;, 2002), new Person(&quot;Yash&quot;, &quot;In Da Club&quot;, &quot;50 Cent&quot;, 2003) ]; // define a Team and build Team objects and json function Team(sponsor, teammate){ // 1 sponsor, many student // start Team with sponsor sponsor.setRole(&quot;Sponsor&quot;); this.sponsor = sponsor; this.Team = [sponsor]; // add each Student to Team this.teammate = teammate; this.teammate.forEach(teammate =&gt; { teammate.setRole(&quot;Teammate&quot;); this.Team.push(teammate); }); // build json/string format of Team this.json = []; this.Team.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci Team from formerly defined sponsor and students compsci = new Team(sponsor, teammate); // define an HTML conversion &quot;method&quot; associated with Team Team.prototype._toHtml = function() { // HTML Style is build using inline structure /* var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); */ // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Name&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Age&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Artist&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Release Year&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Role&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.Team for (var row in compsci.Team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.Team[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.Team[row].song + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.Team[row].artist + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.Team[row].releaseYear + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.Team[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return (&quot;&lt;div style=&#39;&quot; + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot;); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . string: {&#34;name&#34;:&#34;Mr. M&#34;,&#34;song&#34;:&#34;Stayin&#39; Alive&#34;,&#34;artist&#34;:&#34;Bee Gees&#34;,&#34;releaseYear&#34;:1977,&#34;role&#34;:&#34;&#34;} string: {&#34;name&#34;:&#34;Mr. M&#34;,&#34;song&#34;:&#34;Stayin&#39; Alive&#34;,&#34;artist&#34;:&#34;Bee Gees&#34;,&#34;releaseYear&#34;:1977,&#34;role&#34;:&#34;Sponsor&#34;} . NameAgeArtistRelease YearRole . Mr. M | Stayin&#39; Alive | Bee Gees | 1977 | Sponsor | Rithwikh | Drop It Like It&#39;s Hot | Snoop Dogg | 2004 | Teammate | Aidan | Ms. Jackson | OutKast | 2000 | Teammate | Jun | Ignition | R. Kelly | 2002 | Teammate | Yash | In Da Club | 50 Cent | 2003 | Teammate | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://yashshah138.github.io/Fastpages/week-5/2022/09/26/JavaScript-Tutorial.html",
            "relUrl": "/week-5/2022/09/26/JavaScript-Tutorial.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fibonacci, Extends and Data Modeling",
            "content": "Produce the Fibonacci sequence in multiple ways . Fibonacci Using For Loop . import java.util.Scanner; public class FLoop { public static void main(String[] args) { Scanner in = new Scanner(System.in); int n = in.nextInt(); int firstTerm = 0, secondTerm = 1; System.out.println(&quot;Fibonacci Series for the first &quot; + n + &quot; terms:&quot;); for (int i = 1; i &lt;= n; i++) { System.out.print(firstTerm + &quot; &quot;); int nextTerm = firstTerm + secondTerm; firstTerm = secondTerm; secondTerm = nextTerm; } } } FLoop.main(null); . Fibonacci Series for the first 20 terms: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 . Fibonacci Using While Loop . import java.util.Scanner; public class WLoop { public static void main(String[] args) { Scanner in = new Scanner(System.in); int n = in.nextInt(); int firstTerm = 0, secondTerm = 1, i = 1; System.out.println(&quot;Fibonacci Series for the first &quot; + n + &quot; terms:&quot;); while (i &lt;= n) { System.out.print(firstTerm + &quot; &quot;); int nextTerm = firstTerm + secondTerm; firstTerm = secondTerm; secondTerm = nextTerm; i++; } } } WLoop.main(null); . Fibonacci Series for the first 20 terms: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 . Fibonacci Using Recursion . public class Recursion { public static void main(String[] args) { int lastTerm = 0, nextTerm = 1; Scanner sc = new Scanner(System.in); int maxTermLength = sc.nextInt(); System.out.println(&quot;How many terms do you want in the Fibonacci Sequence? &quot; + maxTermLength); System.out.println(&quot;Fibonacci Sequence with &quot; + maxTermLength + &quot; terms.&quot;); for (int i = 1; i &lt;= maxTermLength; ++i) { System.out.print(lastTerm+&quot; &quot;); int sum = lastTerm + nextTerm; lastTerm = nextTerm; nextTerm = sum; } } } Recursion.main(null); . How many terms do you want in the Fibonacci Sequence? 20 Fibonacci Sequence with 20 terms. 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 .",
            "url": "https://yashshah138.github.io/Fastpages/week-5/2022/09/26/Fibonacci.html",
            "relUrl": "/week-5/2022/09/26/Fibonacci.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Iteration Mini-Lab",
            "content": "Print Horizontally . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/&quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loops&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot; n&quot; + i + &quot; little monkeys jumping on the bed...&quot;); System.out.println(&quot;Mama called the doctor and the doctor said...&quot;); System.out.println(&quot;NO MORE MONKEYS JUMPING ON THE BED!!&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyCount; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loops 5 little monkeys jumping on the bed... Mama called the doctor and the doctor said... NO MORE MONKEYS JUMPING ON THE BED!! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Mama called the doctor and the doctor said... NO MORE MONKEYS JUMPING ON THE BED!! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Mama called the doctor and the doctor said... NO MORE MONKEYS JUMPING ON THE BED!! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Mama called the doctor and the doctor said... NO MORE MONKEYS JUMPING ON THE BED!! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Mama called the doctor and the doctor said... NO MORE MONKEYS JUMPING ON THE BED!! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed - - THE END . Yash&#39;s Monkeys . class Monkey { public Monkey(String monkeyName, String[] monkeyArt) { this.name = monkeyName; this.art = monkeyArt; } String name; String[] art; public void print() { for (int row = 0; row &lt; art.length; row++) { System.out.println(art[row]); } System.out.println(); } public static void main(String[] args) { String[] monkeyRithwikh = { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; _⏄_/ &quot;, &quot; --0-- &quot;, &quot; ⎛ ⎞ &quot; }; String[] monkeyAidan = { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }; String[] monkeyJun = { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }; Monkey Rithwikh = new Monkey(&quot;Rithwikh&quot;, monkeyRithwikh); Monkey Aidan = new Monkey(&quot;Aidan&quot;, monkeyAidan); Monkey Jun = new Monkey(&quot;Jun&quot;, monkeyJun); Monkey[] monkeys = {Rithwikh, Aidan, Jun}; for (int i = 0; i &lt; monkeys.length; i++) { System.out.println(monkeys[i].name + &quot;: &quot;); monkeys[i].print(); } } } Monkey.main(null); . Rithwikh: ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Aidan: ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Jun: ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ .",
            "url": "https://yashshah138.github.io/Fastpages/week-4/2022/09/20/Iteration.html",
            "relUrl": "/week-4/2022/09/20/Iteration.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "2018 AP CSA FRQ 1",
            "content": "Part A . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. . The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. . The frog hops until one of the following conditions becomes true: . The frog has reached or passed the goal. | The frog has reached a negative position. | The frog has taken the maximum number of hops without reaching the goal. | . Complete method simulate below. You must use hopDistance appropriately to receive full credit. . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() . My Solution . public boolean simulate() { int pos = 0; for (int i = 0; i &lt; maxHops; i ++) { posNow += hopDistance(); if (posNow &gt;= goalDistance) { return true; } else if (posNow &lt; 0) { return false; } } } . CollegeBoard Solution . public boolean simulate() { int position = 0; for (int count = 0; count &lt; maxHops; count++) { position += hopDistance(); if (position &gt;= goalDistance) { return true; } else if (position &lt; 0) { return false; } } return false; } . Part B . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. . Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) . My Solution . public double runSimulations(int num) { int wins = 0; for (int j = 0; i &lt; num; i++) { if (simulate()) { wins++; } } return ((double)numSuccess/num); } . CollegeBoard Solution . public double runSimulations(int num) { int countSuccess = 0; for (int count = 0; count &lt; num; count++) { if(simulate()) { countSuccess++; } } return (double)countSuccess / num; } .",
            "url": "https://yashshah138.github.io/Fastpages/frqs/week-4/2022/09/20/AP-CSA-FRQ1.html",
            "relUrl": "/frqs/week-4/2022/09/20/AP-CSA-FRQ1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Focus and Habits",
            "content": "Psychology and the Good Life by Laurie Santos Takeaways . Be happy | Be grateful for the things that you have | It is ok to ask for help | Just be present in the moment Don’t be worried about the past and don’t be anxious about the future | . | . Who Am I Grateful For . My family | My friends | My good health | . My Goals . I want to major in computer science with specialization in machine learning | I want to work in either software development or in investment banking and private equity | I want to better manage my time | I want to sleep at better times | I want to develop the technical skills in computer science to succeed | . . . .",
            "url": "https://yashshah138.github.io/Fastpages/human%20prep/2022/09/12/Focus-and-Habits.html",
            "relUrl": "/human%20prep/2022/09/12/Focus-and-Habits.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Boolean Expressions and If/Else Statements",
            "content": "Boolean Expressions . Booleans are either one of two instances. True/False or On/Off | A boolean type is declared with the boolean keyword and can only take the values true or false | . if (true) { System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } . True code block True and Not False code block True or False code block Confusing code block De Morgan&#39;s law in my head of confusing code block . If/Elseif/Else Statements . If statement to specify a block of Java code to be executed if a condition is true | Else statement to specify a block of code to be executed if the condition is false | Else if statement to specify a new condition if the first condition is false. | . int time = 22; // if statement if (time &lt; 10) { System.out.println(&quot;Good morning.&quot;); } // else if statement else if (time &lt; 20) { System.out.println(&quot;Good day.&quot;); } // else statement else { System.out.println(&quot;Good evening.&quot;); } . Good evening. . De Morgan&#39;s Law . Two definitions De Morgan&#39;s Law of Union: The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B). This is also known as De Morgan&#39;s Law of Union. It can be represented as (A ∪ B)&#39; = A&#39; ∩ B&#39;. | Laws that define how we can negate an AND statement and how we can negate an OR statement. De Morgan&#39;s Laws simply state: !( a &amp;&amp; b) is equivalent to !a || ! | . | . if (!(!false &amp;&amp; !true) || (!(!false || false))) { System.out.println(&quot;De Morgan&#39;s Law hurts my head!&quot;); } . De Morgan&#39;s Law hurts my head! . Hack 2 - Add to lesson switch-case . public class Main { public static void main(String[] args) { Scanner sc = new Scanner(System.in); // sets the variable &quot;day&quot; as user input int day = sc.nextInt(); System.out.println(&quot;Pick an number between 1 and 7 &quot; + day); // checks if the user inputted number is 1 // If not, it runs through the rest of the statements if(num = 1){ System.out.println(&quot;The day is Monday&quot;); } else if(num = 2){ System.out.println(&quot;The day is Tuesday&quot;); } else if(num = 3){ System.out.println(&quot;The day is Wednesday&quot;); } else if(num = 4){ System.out.println(&quot;The day is Thursday&quot;); } else if(num = 5){ System.out.println(&quot;The day is Friday&quot;); } else if(num = 6){ System.out.println(&quot;The day is Saturday&quot;); } else if(num = 7){ System.out.println(&quot;The day is Sunday&quot;); } else{ System.out.println(&quot;Not a valid entry&quot;); } } } Main.main(null); . Pick a number: 26 26 is less than 30 . Converted to switch-case-case-case-case-otherwise . public class Switch { public static void main(String[] args) { Scanner sc = new Scanner(System.in); int day = sc.nextInt(); // Asks user for a number of their choice System.out.println(&quot;Pick an number between 1 and 7: &quot; + day); // the day is the conditional variable that is tested switch (day) { // The switch case checks multiple conditions at once. // Switch is provided with an expression that can be a constant or literal expression that can be evaluated. // The value of the expression is matched with each test case till a match is found. // If there is no match then the &quot;default&quot; code runs. case 1: System.out.println(&quot;The first day is Monday&quot;); break; case 2: System.out.println(&quot;The second day is Tuesday&quot;); break; case 3: System.out.println(&quot;The third day is Wednesday&quot;); break; case 4: System.out.println(&quot;The fourth day is Thursday&quot;); break; case 5: System.out.println(&quot;The fifth day is Friday&quot;); break; case 6: System.out.println(&quot;The sixth day is Saturday&quot;); break; case 7: System.out.println(&quot;The seventh day is Sunday&quot;); break; // Our last test is if the number is not between 1 and 7. default: System.out.println(&quot;Not a valid entry. Choose a number between 1 and 7.&quot;); } } } Switch.main(null); . Pick an number between 1 and 7: 3 The third day is Wednesday .",
            "url": "https://yashshah138.github.io/Fastpages/2022/09/07/Boolean-Expressions-and-If-Statements.html",
            "relUrl": "/2022/09/07/Boolean-Expressions-and-If-Statements.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "code.org Unit 1",
            "content": "// Creating a class public class MyNeighborhood { public static void main(String[] args) { // Creating an Object Painter myPainter = new Painter(); // calling a method using dot notation myPainter.move(); myPainter.turnLeft(); } } . // Extend a superclass to the subclass // A.K.A. Inheritance public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Inheritance . Inheritance allows us to &quot;inherit&quot; the methods and attributes of the superclass to the subclass | . // Formatting for inheritance public class subclass extends superclass { // code here } .",
            "url": "https://yashshah138.github.io/Fastpages/week-2/2022/09/06/code-org.html",
            "relUrl": "/week-2/2022/09/06/code-org.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Console Menu",
            "content": "Console Based Menu . Objects Used: . Used scanner class to get user input and make objects | Used system class to print out static methods | Used the Math Class from Java to create a basic console calculator | . import java.util.*; import java.util.Scanner; public class Hello { public static void main(String[] args) { Scanner inp = new Scanner(System.in); System.out.println(&quot;-&quot;); System.out.println(&quot;Choose one&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Addition&quot;); System.out.println(&quot;2 - Subtraction&quot;); System.out.println(&quot;3 - Multiplication&quot;); System.out.println(&quot;4 - Division&quot;); System.out.println(&quot;- n&quot;); int choose; choose = inp.nextInt(); System.out.println(&quot;Enter first number: &quot;); int num1; num1 = inp.nextInt(); System.out.println(&quot;Enter second number: &quot; + &quot; n&quot;); int num2; num2 = inp.nextInt(); int ans; switch (choose) { case 1: System.out.println(add( num1,num2)); break; case 2: System.out.println(sub( num1,num2)); break; case 3: System.out.println(mult( num1,num2)); break; case 4: System.out.println(div( num1,num2)); break; default: System.out.println(&quot;Illegal Operation&quot;); } } public static int add (int x, int y) { int result = x + y; System.out.println(x + &quot; + &quot; + y + &quot; equals&quot;); return result; } public static int sub (int x, int y) { int result = x-y; System.out.println(x + &quot; - &quot; + y + &quot; equals&quot;); return result; } public static int mult (int x, int y) { int result = x*y; System.out.println(x + &quot; * &quot; + y + &quot; equals&quot;); return result; } public static int div (int x, int y) { int result = x/y; System.out.println(x + &quot; / &quot; + y + &quot; equals&quot;); return result; } } Hello.main(null); . - Choose one - 1 - Addition 2 - Subtraction 3 - Multiplication 4 - Division - Enter first number: Enter second number: 3 * 3 equals 9 . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;CSA&quot;, &quot;COLORS&quot;, &quot;Loading...&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 10; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(700,400); // helps set the window to center of screen frame.setLocationRelativeTo(null); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } public static void centreWindow(Window frame) { Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2); frame.setLocation(x, y); } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Purple&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;$&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;CSA IS AWESOME!&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Hacks . Explain where a Class is defined . A class is defined where you add variables, objects or methods to your code | . public class // Classname . Explain where an instances of a Class is defined . An instance is defined in the main class | For example, on Code.org we initiated an instance with | . PainterPlus myPainter = new PainterPlus(); . Explain where an object is calling a method . An object is calling a method when an action needs to be performed for the code to run. | Calling a method on code.org | . myPainter.paint(&quot;white&quot;); . Describe Console, GUI differences, or Code.org differences . Console . User enters input and get respective outputs | Not as visual | Requires very good understanding of script and syntax | Examples: BASH, Terminal, Command Prompt, Kali linux | . | GUI . Graphical User Interface | More visual interface | User-friendly | Examples: iOS, Android, MacOS, Windows | . | code.org . Introductory platform | Graphical representation of what code does with the syntax of the language | . | .",
            "url": "https://yashshah138.github.io/Fastpages/week-2/2022/09/06/Using-Objects.html",
            "relUrl": "/week-2/2022/09/06/Using-Objects.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Extra Credit Notes",
            "content": "Reflection . There were several things that I learned from the student panel today. The first thing that I learned was that within the field of computer science, there will always be somebody that is better at something than you, and instead of being sad about that to focus on my own strengths and play to those. For example, if somebody is better at the syntax of the language and I am better with the logic, we can form a team where I can plan out the structure and flow of the code and my partner can code the program. The second thing I learned from the student panel was that no matter which field of study you go to, there will always be computer science to either make it more efficient or help with automation. The example that I remember from the panel is from Colin when he was talking about a script that he wrote to convert his notes from a .docx file into a spreadsheet. I connected this with the automation hack that we had for this week where we tried to automate the installation process of the packages. The third and most important thing, in my opinion, is to persevere. There will always be bugs or problems and you cannot give up because you didn’t find the bub. On example I remember is when Mabel was talking about how we all forget a semicolon or an indent and we just have to be patient and persevere through. . Notes . Look at how you have developed and compare yourself with classmates | Look at your passions and look at how cs can help | CS will be used almost anywhere and should know as base | CSP helped build the technical background of building UI/UX | Most of them always had passion for CS and developed that passion through CSA/CSP | They realized that CS could help people | Persevere through challenges | Have to focus on your own path, don’t be worried about what other people think/do | Transition from HS to college CS was quite drastic | Just break things down into little steps | Not expected to know everything, learn to use resources to fix errors and learn | Don’t cut corners, go above and beyond | Will not always have a path, don’t be so focused on the plan that you don’t start | Good to have the knowledge of PBL classes beforehand | Be able to ask questions | Able to automate menial tasks | CS has lots of utilizations and useful even if you are not majoring in it | Will apply the stuff in other classes | Stats uses R | Build relationships with professors to do work with them | .",
            "url": "https://yashshah138.github.io/Fastpages/extras/2022/08/29/Alumni-Panel.html",
            "relUrl": "/extras/2022/08/29/Alumni-Panel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Bash Kernel Basics Notebook",
            "content": "echo &quot;List of all files in the root folder ... &quot; cd vscode/Fastpages ls echo &quot;&quot; echo &quot;List of all files in the repository including all hidden files:&quot; cd vscode/Fastpages ls -a . List of all files in the root folder: 2022-05-15-07-21-16.png _config.yml _sass 2022-05-15-07-24-25.png _fastpages_docs _word 2022-05-15-07-25-15.png _includes assets Gemfile _layouts docker-compose.yml LICENSE _notebooks images Makefile _pages index.html README.md _plugins _action_files _posts List of all files in the repository including all hidden files: bash: cd: vscode/Fastpages: No such file or directory . 2022-05-15-07-25-15.png _pages .. Gemfile _plugins .DS_Store LICENSE _posts .devcontainer.json Makefile _sass .git README.md _word .gitattributes _action_files assets .github _config.yml docker-compose.yml .gitignore _fastpages_docs images .vscode _includes index.html 2022-05-15-07-21-16.png _layouts 2022-05-15-07-24-25.png _notebooks . Hack 1 - Is there anything we use to verify tools we install? . echo &quot;Checking versions and existence of python and java ... &quot; python3 --version python2 --version java --version javac --version . Checking versions and existence of python and java: Python 3.9.12 Python 2.7.18 java 11.0.12 2021-07-20 LTS Java(TM) SE Runtime Environment 18.9 (build 11.0.12+8-LTS-237) Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.12+8-LTS-237, mixed mode) javac 11.0.12 . Hack 2 - Is there anything we could verify with Anaconda? . echo &quot;Running checks with Anaconda ... &quot; conda --version echo &quot;&quot; conda list python . Running checks with Anaconda: conda 4.13.0 # packages in environment at /Users/yash/opt/anaconda3: # # Name Version Build Channel ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hf7b0b51_1 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 . Hack 3 - How would you update a repository? . cd ~/vscode/Fastpages git pull . Already up to date. . This is a small script to show understanding of BASH . echo &quot;&quot; echo &quot;This script will create a file in the _pages directory and will put all files inside including hidden files.&quot; cd ~ echo &quot;&quot; cd vscode/Fastpages/_pages ls touch 06_bash.md cd ~ ls -al &gt; vscode/Fastpages/_pages/06_bash.md echo &quot;&quot; echo &quot;vscode/Fastpages/_pages/06_bash.md&quot; nl vscode/Fastpages/_pages/06_bash.md . This script will create a file in the _pages directory and will put all files inside including hidden files. 01_notes.md 03_about.md 05_tags.html 404.html 02_vocab.md 04_search.html 06_bash.md vscode/Fastpages/_pages/06_bash.md 1 total 208 2 drwxr-xr-x+ 55 yash staff 1760 Aug 26 09:06 . 3 drwxr-xr-x 6 root admin 192 Aug 10 23:44 .. 4 -r-- 1 yash staff 7 Oct 2 2019 .CFUserTextEncoding 5 -rw-r--r--@ 1 yash staff 14340 Aug 23 10:43 .DS_Store 6 drwx 183 yash staff 5856 Aug 26 09:40 .Trash 7 drwxr-xr-x 3 yash staff 96 Oct 20 2021 .android 8 -rw- 1 yash staff 12711 Aug 26 09:11 .bash_history 9 -rw-r--r-- 1 yash staff 1331 Aug 18 08:54 .bash_profile 10 -rw-r--r-- 1 yash staff 672 Oct 4 2021 .bash_profile.pysave 11 drwx 30 yash staff 960 Aug 26 09:11 .bash_sessions 12 drwxr-xr-x 3 yash staff 96 Aug 18 22:40 .cache 13 drwxrwsr-x 3 yash staff 96 Aug 18 08:59 .conda 14 drwxr-xr-x 6 yash staff 192 Aug 21 23:39 .config 15 drwx 3 yash staff 96 Jun 2 2020 .cups 16 -rw-r--r-- 1 yash staff 208 Aug 26 2021 .gitconfig 17 drwxr-xr-x 4 yash staff 128 Sep 21 2021 .gradle 18 drwxr-xr-x 5 yash staff 160 May 1 19:15 .idlerc 19 drwxr-xr-x 3 yash staff 96 Mar 4 08:34 .ipython 20 drwxr-xr-x 3 yash staff 96 Aug 18 08:59 .jupyter 21 drwxr-xr-x 3 yash staff 96 Apr 12 10:14 .keras 22 -rw- 1 yash staff 20 May 6 12:04 .lesshst 23 drwxr-xr-x 3 yash staff 96 Aug 19 14:15 .m2 24 drwxr-xr-x 2 yash staff 64 Mar 8 13:25 .matplotlib 25 drwxr-xr-x 3 yash staff 96 Aug 18 09:21 .node-gyp 26 drwxr-xr-x 8 yash staff 256 Aug 21 23:44 .npm 27 drwxr-xr-x 3 yash staff 96 Mar 26 2021 .oracle_jre_usage 28 drwx 3 yash staff 96 Apr 12 11:25 .putty 29 -rw- 1 yash staff 51 Aug 27 2021 .python_history 30 drwxr-xr-x 3 yash staff 96 Aug 19 08:42 .redhat 31 drwx 6 yash staff 192 Aug 12 19:04 .ssh 32 drwxr-xr-x 3 yash staff 96 Aug 18 22:43 .sts4 33 -rw-r--r-- 1 yash staff 314 Aug 18 08:54 .tcshrc 34 -rw- 1 yash staff 1071 Aug 26 2021 .viminfo 35 drwxr-xr-x 4 yash staff 128 Feb 28 10:51 .vscode 36 -rw-r--r-- 1 yash staff 165 Aug 18 09:23 .wget-hsts 37 -rw-r--r-- 1 yash staff 597 Aug 18 08:54 .xonshrc 38 -rw-r--r-- 1 yash staff 248 Aug 21 23:32 .zprofile 39 -rw- 1 yash staff 18722 Aug 26 09:06 .zsh_history 40 drwx 68 yash staff 2176 Aug 26 09:06 .zsh_sessions 41 -rw-r--r-- 1 yash staff 490 Aug 18 08:54 .zshrc 42 drwx@ 5 yash staff 160 Nov 16 2021 Applications 43 drwx@ 4 yash staff 128 Aug 24 14:35 Creative Cloud Files 44 drwx@ 7 yash staff 224 Jul 11 21:15 Desktop 45 drwx@ 8 yash staff 256 May 11 10:34 Documents 46 drwx@ 48 yash staff 1536 Aug 25 22:44 Downloads 47 drwx@ 104 yash staff 3328 Aug 24 14:19 Library 48 drwx+ 9 yash staff 288 Dec 8 2021 Movies 49 drwx+ 10 yash staff 320 May 11 10:09 Music 50 drwx+ 7 yash staff 224 Dec 14 2020 Pictures 51 drwxr-x+ 4 yash staff 128 Oct 2 2019 Public 52 drwxr-xr-x 4 yash staff 128 Mar 5 2021 Samsung 53 drwxr-xr-x 5 yash staff 160 May 5 2019 java 54 drwxr-xr-x 3 yash staff 96 Aug 18 08:41 opt 55 drwxr-xr-x 8 yash staff 256 Aug 25 08:55 vscode 56 -rw-r--r--@ 1 yash staff 162 Feb 16 2021 ~$mes_Final.docx . Below is a script I developed to automate deployment . sudo apt update; sudo apt upgrade sudo apt install default-jre java --version sudo apt install default-jdk javac --version sudo apt update sudo apt upgrade sudo apt install maven mvn --version # This segment of code clones the repository and goes into that directory after done cloning cd ~ git clone https://github.com/guapbeast/Spring.git cd ~/Spring # Runs the maven wrapper package ./mvnw package # This assigns the result of the previous command to RESULT # Then runs an if/else statement # Saying that if the previous commands result comes back as exit code 0 # Then to proceed with changing the directory # If it does not work, then execute the following commands RESULT=$? if [[ $RESULT -eq 0 ]] then cd ~/Spring else sudo apt install -y dos2unix dos2unix ./mvnw chmod +x ./mvnw fi # &quot;&gt;&quot; overrides whatever is already in the file and writes # What is in the &quot;echo&quot; echo &#39; # syntax=docker/dockerfile:1 FROM openjdk:16-alpine3.13 WORKDIR /app RUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add --no-cache git maven RUN git clone https://github.com/guapbeast/Spring.git /app RUN ./mvnw package CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;target/spring-0.0.1-SNAPSHOT.jar&quot;] # EXPOSE port that is defined in spring_portfolio.git application.properties EXPOSE 8085&#39; &gt; Dockerfile # &quot;&gt;&quot; overrides whatever is already in the file and writes # What is in the &quot;echo&quot; echo &#39; version: &quot;3&quot; services: web: image: java_springv1 build: . ports: - &quot;8085:8085&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/Spring/volumes&#39; &gt; docker-compose.yml # Installs docker and docker-compose sudo apt install docker-compose -y sudo docker-compose up -d sudo apt install nginx cd /etc/nginx/sites-available sudo touch Spring # &quot;&gt;&quot; overrides whatever is already in the file and writes # What is in the &quot;echo&quot; echo &#39; server { listen 80; listen [::]:80; server_name csarithwikh.live www.csarithwikh.live; location / { proxy_pass http://localhost:8085; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } }&#39; &gt; Spring sudo ln -s /etc/nginx/sites-available/Spring /etc/nginx/sites-enabled sudo nginx -t # This assigns the result of the previous command to RESULT # Then runs an if/else statement # Saying that if the previous commands result comes back as exit code 0 # Then to run the following code # If it does not work, then execute the other commands RESULT=$? if [[ $RESULT -eq 0 ]] then sudo systemctl restart nginx else echo &quot;Something went wrong!!!&quot; fi # Transfers data to the address curl http://localhost:8085; sudo snap install core; sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot sudo certbot --nginx .",
            "url": "https://yashshah138.github.io/Fastpages/week-1/2022/08/25/Bash-Tutorial.html",
            "relUrl": "/week-1/2022/08/25/Bash-Tutorial.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Primitive Data Types",
            "content": "Notes on Primitive Data Types . There are two main types of data structures, primitive and non-primitive. Strings, arrays, etc. are examples of non-primitive data types. . Within primitive data types, we have boolean, characters (chars), bytes, shorts, ints, longs, floats, and doubles. For non-primitive data types, it is anything the is, well, non-primitive. For example, we have arrays and strings. . // java style to import library import java.util.Scanner; public class TestPrimitives { public static void main(String[] args) { Scanner input; // Integers input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer, &quot; + e); } input.close(); // Doubles input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double, &quot; + e); } input.close(); // Booleans input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean, &quot; + e); } input.close(); // Wrapper Class Strings input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } TestPrimitives.main(null); . Enter an integer: 3 Enter a double: 3.3 Enter a boolean: true Enter a String: AP CSA is awesome .",
            "url": "https://yashshah138.github.io/Fastpages/week-1/2022/08/24/Primitives.html",
            "relUrl": "/week-1/2022/08/24/Primitives.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Python Kernel Notebook",
            "content": "print(&quot;Welcome to my Python Kernel Notebook!!&quot;) . Welcome to my Python Kernel Notebook!! .",
            "url": "https://yashshah138.github.io/Fastpages/2022/08/22/Python-Notebook.html",
            "relUrl": "/2022/08/22/Python-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Java Kernel Notebook",
            "content": "class HelloWorld { public static void main(String args[]) { System.out.println(&quot;Welcome to my Java Kernel Notebook!!&quot;); } } HelloWorld.main(null) . Welcome to my Java Kernel Notebook!! . System.out.println(&quot;Welcome to my Java Kernel Notebook!!&quot;) . Welcome to my Java Kernel Notebook!! .",
            "url": "https://yashshah138.github.io/Fastpages/week-0/2022/08/22/Java-Notebook.html",
            "relUrl": "/week-0/2022/08/22/Java-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "First Post to Fastpages",
            "content": "Welcome to my website! . Posts will be updated and added throughout the trimester as I learn more. . What is this? . This is a website that uses fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Here I will have my learnings and notes from throughout the trimester. .",
            "url": "https://yashshah138.github.io/Fastpages/week-0/2022/08/21/first-post.html",
            "relUrl": "/week-0/2022/08/21/first-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About Yash Shah . . I am a senior at Del Norte High School and am taking AP Computer Science A. My goal for this class is to learn Java, develop the soft skills needed to work in the computer science field, and have fun! . . My professional goal is to major in computer science with a specialization in machine learning and artificial intelligence with a minor in automotive engineering and finance. . . Some of my hobbies include building LEGOs, hanging out with friends, traveling with family, and photography. I also love tinkering with different things related to computer science. For example, I made my own vpn using AWS and some open-source software over the summer. .",
          "url": "https://yashshah138.github.io/Fastpages/about",
          "relUrl": "/about",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Formula 1 Drivers",
          "content": "&lt;!DOCTYPE html&gt; . Formula 1 Drivers . Formula 1 Drivers and Locations . Driver Name Points Nationality . .",
          "url": "https://yashshah138.github.io/Fastpages/F1-Drivers",
          "relUrl": "/F1-Drivers",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "",
          "content": "Welcome to my fastpages for AP Computer Science A. Here I will show my notes and learnings from this class. . Blogs .",
          "url": "https://yashshah138.github.io/Fastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Welcome to my fastpages for AP Computer Science A. Here I will show my notes and learnings from this class. . Blogs .",
          "url": "https://yashshah138.github.io/Fastpages/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "",
          "content": "Welcome to my fastpages for AP Computer Science A. Here I will show my notes and learnings from this class. . Blogs .",
          "url": "https://yashshah138.github.io/Fastpages/page3/",
          "relUrl": "/page3/",
          "date": ""
      }
      
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yashshah138.github.io/Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}